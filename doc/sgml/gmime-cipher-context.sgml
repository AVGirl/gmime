<refentry id="gmime-gmime-cipher-context">
<refmeta>
<refentrytitle>gmime-cipher-context</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-cipher-context</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="GMimeCipherHash">GMimeCipherHash</link>;
struct      <link linkend="GMimeCipherContext">GMimeCipherContext</link>;
struct      <link linkend="GMimeCipherValidity">GMimeCipherValidity</link>;
<link linkend="GMimeCipherHash">GMimeCipherHash</link> <link linkend="g-mime-cipher-hash-id">g_mime_cipher_hash_id</link>       (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             const char *hash);
const char* <link linkend="g-mime-cipher-hash-name">g_mime_cipher_hash_name</link>         (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeCipherHash">GMimeCipherHash</link> hash);
int         <link linkend="g-mime-cipher-sign">g_mime_cipher_sign</link>              (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             const char *userid,
                                             <link linkend="GMimeCipherHash">GMimeCipherHash</link> hash,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);
<link linkend="GMimeCipherValidity">GMimeCipherValidity</link>* <link linkend="g-mime-cipher-verify">g_mime_cipher_verify</link>   (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeCipherHash">GMimeCipherHash</link> hash,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *sigstream,
                                             <link linkend="GError">GError</link> **err);
int         <link linkend="g-mime-cipher-encrypt">g_mime_cipher_encrypt</link>           (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="gboolean">gboolean</link> sign,
                                             const char *userid,
                                             <link linkend="GPtrArray">GPtrArray</link> *recipients,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);
int         <link linkend="g-mime-cipher-decrypt">g_mime_cipher_decrypt</link>           (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);
int         <link linkend="g-mime-cipher-import-keys">g_mime_cipher_import_keys</link>       (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GError">GError</link> **err);
int         <link linkend="g-mime-cipher-export-keys">g_mime_cipher_export_keys</link>       (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GPtrArray">GPtrArray</link> *keys,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);

void        <link linkend="g-mime-cipher-validity-init">g_mime_cipher_validity_init</link>     (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);
<link linkend="GMimeCipherValidity">GMimeCipherValidity</link>* <link linkend="g-mime-cipher-validity-new">g_mime_cipher_validity_new</link>
                                            (void);
void        <link linkend="g-mime-cipher-validity-clear">g_mime_cipher_validity_clear</link>    (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);
void        <link linkend="g-mime-cipher-validity-free">g_mime_cipher_validity_free</link>     (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);
<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-cipher-validity-get-valid">g_mime_cipher_validity_get_valid</link>
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);
void        <link linkend="g-mime-cipher-validity-set-valid">g_mime_cipher_validity_set_valid</link>
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity,
                                             <link linkend="gboolean">gboolean</link> valid);
const char* <link linkend="g-mime-cipher-validity-get-description">g_mime_cipher_validity_get_description</link>
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);
void        <link linkend="g-mime-cipher-validity-set-description">g_mime_cipher_validity_set_description</link>
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity,
                                             const char *description);


</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMimeCipherHash">enum GMimeCipherHash</title>
<programlisting>typedef enum {
	GMIME_CIPHER_HASH_DEFAULT,
	GMIME_CIPHER_HASH_MD2,
	GMIME_CIPHER_HASH_MD5,
	GMIME_CIPHER_HASH_SHA1,
	GMIME_CIPHER_HASH_RIPEMD160,
	GMIME_CIPHER_HASH_TIGER192,
	GMIME_CIPHER_HASH_HAVAL5160
} GMimeCipherHash;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMimeCipherContext">struct GMimeCipherContext</title>
<programlisting>struct GMimeCipherContext {
	GObject parent_object;
	
	GMimeSession *session;
	
	/* these must be set by the subclass */
	const char *sign_protocol;
	const char *encrypt_protocol;
	const char *key_protocol;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMimeCipherValidity">struct GMimeCipherValidity</title>
<programlisting>struct GMimeCipherValidity;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-hash-id">g_mime_cipher_hash_id ()</title>
<programlisting><link linkend="GMimeCipherHash">GMimeCipherHash</link> g_mime_cipher_hash_id       (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             const char *hash);</programlisting>
<para>
Gets the hash id based on the hash name <parameter>hash</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><para> hash name
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>the equivalent hash id or <link linkend="GMIME-CIPHER-HASH-DEFAULT-CAPS">GMIME_CIPHER_HASH_DEFAULT</link> on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-hash-name">g_mime_cipher_hash_name ()</title>
<programlisting>const char* g_mime_cipher_hash_name         (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeCipherHash">GMimeCipherHash</link> hash);</programlisting>
<para>
Gets the hash name based on the hash id <parameter>hash</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><para> hash id
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>the equivalent hash name or <literal>NULL</literal> on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-sign">g_mime_cipher_sign ()</title>
<programlisting>int         g_mime_cipher_sign              (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             const char *userid,
                                             <link linkend="GMimeCipherHash">GMimeCipherHash</link> hash,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Signs the input stream and writes the resulting signature to the output stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>userid</parameter>&nbsp;:</term>
<listitem><para> private key to use to sign the stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><para> preferred Message-Integrity-Check hash algorithm
</para></listitem></varlistentry>
<varlistentry><term><parameter>istream</parameter>&nbsp;:</term>
<listitem><para> input stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>ostream</parameter>&nbsp;:</term>
<listitem><para> output stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><para> exception
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>0 on success or -1 on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-verify">g_mime_cipher_verify ()</title>
<programlisting><link linkend="GMimeCipherValidity">GMimeCipherValidity</link>* g_mime_cipher_verify   (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeCipherHash">GMimeCipherHash</link> hash,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *sigstream,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Verifies the signature. If <parameter>istream</parameter> is a clearsigned stream,
you should pass <literal>NULL</literal> as the sigstream parameter. Otherwise
<parameter>sigstream</parameter> is assumed to be the signature stream and is used to
verify the integirity of the <parameter>istream</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&nbsp;:</term>
<listitem><para> secure hash used
</para></listitem></varlistentry>
<varlistentry><term><parameter>istream</parameter>&nbsp;:</term>
<listitem><para> input stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>sigstream</parameter>&nbsp;:</term>
<listitem><para> optional detached-signature stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><para> exception
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>a GMimeCipherValidity structure containing information
about the integrity of the input stream or <literal>NULL</literal> on failure to
execute at all.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-encrypt">g_mime_cipher_encrypt ()</title>
<programlisting>int         g_mime_cipher_encrypt           (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="gboolean">gboolean</link> sign,
                                             const char *userid,
                                             <link linkend="GPtrArray">GPtrArray</link> *recipients,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Encrypts (and optionally signs) the cleartext input stream and
writes the resulting ciphertext to the output stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>sign</parameter>&nbsp;:</term>
<listitem><para> sign as well as encrypt
</para></listitem></varlistentry>
<varlistentry><term><parameter>userid</parameter>&nbsp;:</term>
<listitem><para> key id (or email address) to use when signing (assuming <parameter>sign</parameter> is <literal>TRUE</literal>)
</para></listitem></varlistentry>
<varlistentry><term><parameter>recipients</parameter>&nbsp;:</term>
<listitem><para> an array of recipient key ids and/or email addresses
</para></listitem></varlistentry>
<varlistentry><term><parameter>istream</parameter>&nbsp;:</term>
<listitem><para> cleartext input stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>ostream</parameter>&nbsp;:</term>
<listitem><para> ciphertext output stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><para> exception
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>0 on success or -1 on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-decrypt">g_mime_cipher_decrypt ()</title>
<programlisting>int         g_mime_cipher_decrypt           (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Decrypts the ciphertext input stream and writes the resulting
cleartext to the output stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>istream</parameter>&nbsp;:</term>
<listitem><para> input/ciphertext stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>ostream</parameter>&nbsp;:</term>
<listitem><para> output/cleartext stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><para> exception
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>0 on success or -1 for fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-import-keys">g_mime_cipher_import_keys ()</title>
<programlisting>int         g_mime_cipher_import_keys       (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GMimeStream">GMimeStream</link> *istream,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Imports a stream of keys/certificates contained within <parameter>istream</parameter>
into the key/certificate database controlled by <parameter>ctx</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>istream</parameter>&nbsp;:</term>
<listitem><para> input stream (containing keys)
</para></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><para> exception
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>0 on success or -1 on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-export-keys">g_mime_cipher_export_keys ()</title>
<programlisting>int         g_mime_cipher_export_keys       (<link linkend="GMimeCipherContext">GMimeCipherContext</link> *ctx,
                                             <link linkend="GPtrArray">GPtrArray</link> *keys,
                                             <link linkend="GMimeStream">GMimeStream</link> *ostream,
                                             <link linkend="GError">GError</link> **err);</programlisting>
<para>
Exports the keys/certificates in <parameter>keys</parameter> to the stream <parameter>ostream</parameter> from
the key/certificate database controlled by <parameter>ctx</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> Cipher Context
</para></listitem></varlistentry>
<varlistentry><term><parameter>keys</parameter>&nbsp;:</term>
<listitem><para> an array of key ids
</para></listitem></varlistentry>
<varlistentry><term><parameter>ostream</parameter>&nbsp;:</term>
<listitem><para> output stream
</para></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&nbsp;:</term>
<listitem><para> exception
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>0 on success or -1 on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-init">g_mime_cipher_validity_init ()</title>
<programlisting>void        g_mime_cipher_validity_init     (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);</programlisting>
<para>
Initializes the validity structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-new">g_mime_cipher_validity_new ()</title>
<programlisting><link linkend="GMimeCipherValidity">GMimeCipherValidity</link>* g_mime_cipher_validity_new
                                            (void);</programlisting>
<para>
Creates a new validity structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>a new validity structure.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-clear">g_mime_cipher_validity_clear ()</title>
<programlisting>void        g_mime_cipher_validity_clear    (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);</programlisting>
<para>
Clears the contents of the validity structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-free">g_mime_cipher_validity_free ()</title>
<programlisting>void        g_mime_cipher_validity_free     (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);</programlisting>
<para>
Frees the memory used by <parameter>validity</parameter> back to the system.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-get-valid">g_mime_cipher_validity_get_valid ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    g_mime_cipher_validity_get_valid
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);</programlisting>
<para>
Gets the validity of the validity structure <parameter>validity</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para><literal>TRUE</literal> if <parameter>validity</parameter> is valid or <literal>FALSE</literal> otherwise.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-set-valid">g_mime_cipher_validity_set_valid ()</title>
<programlisting>void        g_mime_cipher_validity_set_valid
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity,
                                             <link linkend="gboolean">gboolean</link> valid);</programlisting>
<para>
Sets the validness on the validity structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
<varlistentry><term><parameter>valid</parameter>&nbsp;:</term>
<listitem><para> <literal>TRUE</literal> if valid else <literal>FALSE</literal>
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-get-description">g_mime_cipher_validity_get_description ()</title>
<programlisting>const char* g_mime_cipher_validity_get_description
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity);</programlisting>
<para>
Gets the description set on the validity structure <parameter>validity</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>any description set on the validity structure.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-cipher-validity-set-description">g_mime_cipher_validity_set_description ()</title>
<programlisting>void        g_mime_cipher_validity_set_description
                                            (<link linkend="GMimeCipherValidity">GMimeCipherValidity</link> *validity,
                                             const char *description);</programlisting>
<para>
Sets the description on the validity structure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>validity</parameter>&nbsp;:</term>
<listitem><para> validity structure
</para></listitem></varlistentry>
<varlistentry><term><parameter>description</parameter>&nbsp;:</term>
<listitem><para> validity description
</para></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
