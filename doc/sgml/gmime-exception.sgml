<refentry id="gmime-gmime-exception">
<refmeta>
<refentrytitle>gmime-exception</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-exception</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="ExceptionId">ExceptionId</link>;
struct      <link linkend="GMimeException">GMimeException</link>;
<link linkend="GMimeException">GMimeException</link>* <link linkend="g-mime-exception-new">g_mime_exception_new</link>        (void);
void        <link linkend="g-mime-exception-init">g_mime_exception_init</link>           (<link linkend="GMimeException">GMimeException</link> *ex);
void        <link linkend="g-mime-exception-clear">g_mime_exception_clear</link>          (<link linkend="GMimeException">GMimeException</link> *exception);
void        <link linkend="g-mime-exception-set">g_mime_exception_set</link>            (<link linkend="GMimeException">GMimeException</link> *ex,
                                             <link linkend="ExceptionId">ExceptionId</link> id,
                                             const char *desc);
void        <link linkend="g-mime-exception-setv">g_mime_exception_setv</link>           (<link linkend="GMimeException">GMimeException</link> *ex,
                                             <link linkend="ExceptionId">ExceptionId</link> id,
                                             const char *format,
                                             ...);
<link linkend="ExceptionId">ExceptionId</link> <link linkend="g-mime-exception-get-id">g_mime_exception_get_id</link>         (<link linkend="GMimeException">GMimeException</link> *ex);
const char* <link linkend="g-mime-exception-get-description">g_mime_exception_get_description</link>
                                            (<link linkend="GMimeException">GMimeException</link> *ex);
#define     <link linkend="g-mime-exception-is-set">g_mime_exception_is_set</link>         (ex)
void        <link linkend="g-mime-exception-xfer">g_mime_exception_xfer</link>           (<link linkend="GMimeException">GMimeException</link> *ex_dst,
                                             <link linkend="GMimeException">GMimeException</link> *ex_src);
void        <link linkend="g-mime-exception-free">g_mime_exception_free</link>           (<link linkend="GMimeException">GMimeException</link> *exception);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="ExceptionId">enum ExceptionId</title>
<programlisting>typedef enum {
#include &lt;gmime/gmime-exception-list.def&gt;
} ExceptionId;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMimeException">struct GMimeException</title>
<programlisting>struct GMimeException {
	/* do not access the fields directly */
	ExceptionId id;
	char *desc;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-new">g_mime_exception_new ()</title>
<programlisting><link linkend="GMimeException">GMimeException</link>* g_mime_exception_new        (void);</programlisting>
<para>
Create and returns a new exception object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the newly allocated exception object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-init">g_mime_exception_init ()</title>
<programlisting>void        g_mime_exception_init           (<link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
Init an exception. This routine is mainly
useful when using a statically allocated
exception.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-clear">g_mime_exception_clear ()</title>
<programlisting>void        g_mime_exception_clear          (<link linkend="GMimeException">GMimeException</link> *exception);</programlisting>
<para>
Clear an exception, that is, set the exception ID to
GMIME_EXCEPTION_NONE and free the description text. If the
exception is NULL, this funtion just returns.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>exception</parameter>&nbsp;:</entry>
<entry> the exception object
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-set">g_mime_exception_set ()</title>
<programlisting>void        g_mime_exception_set            (<link linkend="GMimeException">GMimeException</link> *ex,
                                             <link linkend="ExceptionId">ExceptionId</link> id,
                                             const char *desc);</programlisting>
<para>
Set the value of an exception. The exception id is 
a unique number representing the exception. The 
textual description is a small text explaining 
what happened and provoked the exception.
</para>
<para>
When <parameter>ex</parameter> is NULL, nothing is done, this routine
simply returns.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception object 
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> exception id 
</entry></row>
<row><entry align="right"><parameter>desc</parameter>&nbsp;:</entry>
<entry> textual description of the exception
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-setv">g_mime_exception_setv ()</title>
<programlisting>void        g_mime_exception_setv           (<link linkend="GMimeException">GMimeException</link> *ex,
                                             <link linkend="ExceptionId">ExceptionId</link> id,
                                             const char *format,
                                             ...);</programlisting>
<para>
Set the value of an exception. The exception id is 
a unique number representing the exception. The 
textual description is a small text explaining 
what happened and provoked the exception. 
In this version, the string is created from the format 
string and the variable argument list.
</para>
<para>
It is safe to say:
  g_mime_exception_setv (ex, ..., g_mime_exception_get_description (ex), ...);
</para>
<para>
When <parameter>ex</parameter> is NULL, nothing is done, this routine
simply returns.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception object 
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> exception id 
</entry></row>
<row><entry align="right"><parameter>format</parameter>&nbsp;:</entry>
<entry> format of the description string. The format string is
used as in printf().
</entry></row>
<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
<entry> arguments
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-get-id">g_mime_exception_get_id ()</title>
<programlisting><link linkend="ExceptionId">ExceptionId</link> g_mime_exception_get_id         (<link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
Return the id of an exception. 
If <parameter>ex</parameter> is NULL, return GMIME_EXCEPTION_NONE;</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> The exception object
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Exception ID.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-get-description">g_mime_exception_get_description ()</title>
<programlisting>const char* g_mime_exception_get_description
                                            (<link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
Return the exception description text. 
If <parameter>ex</parameter> is NULL, return NULL;</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> The exception object
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> Exception description text.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-is-set">g_mime_exception_is_set()</title>
<programlisting>#define     g_mime_exception_is_set(ex)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-xfer">g_mime_exception_xfer ()</title>
<programlisting>void        g_mime_exception_xfer           (<link linkend="GMimeException">GMimeException</link> *ex_dst,
                                             <link linkend="GMimeException">GMimeException</link> *ex_src);</programlisting>
<para>
Transfer the content of an exception from
an exception object to another. 
The destination exception receives the id and
the description text of the source exception.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ex_dst</parameter>&nbsp;:</entry>
<entry> Destination exception object 
</entry></row>
<row><entry align="right"><parameter>ex_src</parameter>&nbsp;:</entry>
<entry> Source exception object
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-exception-free">g_mime_exception_free ()</title>
<programlisting>void        g_mime_exception_free           (<link linkend="GMimeException">GMimeException</link> *exception);</programlisting>
<para>
Free an exception object. If the exception is NULL, nothing is
done, the routine simply returns.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>exception</parameter>&nbsp;:</entry>
<entry> The exception object to free
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
