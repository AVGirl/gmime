<refentry id="gmime-gmime-header">
<refmeta>
<refentrytitle>gmime-header</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-header</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="GMimeHeader">GMimeHeader</link>;
void        (<link linkend="GMimeHeaderForeachFunc">*GMimeHeaderForeachFunc</link>)       (const char *name,
                                             const char *value,
                                             <link linkend="gpointer">gpointer</link> user_data);
<link linkend="GMimeHeader">GMimeHeader</link>* <link linkend="g-mime-header-new">g_mime_header_new</link>              (void);
void        <link linkend="g-mime-header-destroy">g_mime_header_destroy</link>           (<link linkend="GMimeHeader">GMimeHeader</link> *header);
void        <link linkend="g-mime-header-add">g_mime_header_add</link>               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name,
                                             const char *value);
void        <link linkend="g-mime-header-set">g_mime_header_set</link>               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name,
                                             const char *value);
const char* <link linkend="g-mime-header-get">g_mime_header_get</link>               (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name);
void        <link linkend="g-mime-header-remove">g_mime_header_remove</link>            (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name);
<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-header-write-to-stream">g_mime_header_write_to_stream</link>   (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
char*       <link linkend="g-mime-header-to-string">g_mime_header_to_string</link>         (const <link linkend="GMimeHeader">GMimeHeader</link> *header);
void        <link linkend="g-mime-header-foreach">g_mime_header_foreach</link>           (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GMimeHeaderForeachFunc">GMimeHeaderForeachFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMimeHeader">struct GMimeHeader</title>
<programlisting>struct GMimeHeader;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMimeHeaderForeachFunc">GMimeHeaderForeachFunc ()</title>
<programlisting>void        (*GMimeHeaderForeachFunc)       (const char *name,
                                             const char *value,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><para>
</para></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><para>
</para></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><para>


</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-new">g_mime_header_new ()</title>
<programlisting><link linkend="GMimeHeader">GMimeHeader</link>* g_mime_header_new              (void);</programlisting>
<para>
Creates a new GMimeHeader object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>a new header object.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-destroy">g_mime_header_destroy ()</title>
<programlisting>void        g_mime_header_destroy           (<link linkend="GMimeHeader">GMimeHeader</link> *header);</programlisting>
<para>
Destroy the header object</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-add">g_mime_header_add ()</title>
<programlisting>void        g_mime_header_add               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name,
                                             const char *value);</programlisting>
<para>
Adds a header. If <parameter>value</parameter> is <literal>NULL</literal>, a space will be set aside for it
(useful for setting the order of headers before values can be
obtained for them) otherwise the header will be unset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><para> header name
</para></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><para> header value
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-set">g_mime_header_set ()</title>
<programlisting>void        g_mime_header_set               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name,
                                             const char *value);</programlisting>
<para>
Set the value of the specified header. If <parameter>value</parameter> is <literal>NULL</literal> and the
header, <parameter>name</parameter>, had not been previously set, a space will be set
aside for it (useful for setting the order of headers before values
can be obtained for them) otherwise the header will be unset.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><para> header name
</para></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><para> header value
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-get">g_mime_header_get ()</title>
<programlisting>const char* g_mime_header_get               (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name);</programlisting>
<para>
Gets the value of the header requested.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><para> header name
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>the value of the header requested.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-remove">g_mime_header_remove ()</title>
<programlisting>void        g_mime_header_remove            (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const char *name);</programlisting>
<para>
Remove the specified header.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><para> header name
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-write-to-stream">g_mime_header_write_to_stream ()</title>
<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_header_write_to_stream   (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
<para>
Write the headers to a stream.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><para> output stream
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>the number of bytes written or -1 on fail.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-to-string">g_mime_header_to_string ()</title>
<programlisting>char*       g_mime_header_to_string         (const <link linkend="GMimeHeader">GMimeHeader</link> *header);</programlisting>
<para>
Allocates a string buffer containing the raw rfc822 headers
contained in <parameter>header</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>a string containing the header block
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-header-foreach">g_mime_header_foreach ()</title>
<programlisting>void        g_mime_header_foreach           (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GMimeHeaderForeachFunc">GMimeHeaderForeachFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Calls <parameter>func</parameter> for each header name/value pair.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><para> header object
</para></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><para> function to be called for each header.
</para></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><para> User data to be passed to the func.
</para></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
