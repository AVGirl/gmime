<refentry id="gmime-gmime-header" revision="23 Jun 2001">
<refmeta>
<refentrytitle>gmime-header</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-header</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



void        (<link linkend="GMimeHeaderFunc">*GMimeHeaderFunc</link>)              (const <link linkend="gchar">gchar</link> *name,
                                             const <link linkend="gchar">gchar</link> *value,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="GMimeHeader">GMimeHeader</link>* <link linkend="g-mime-header-new">g_mime_header_new</link>              (void);
void        <link linkend="g-mime-header-destroy">g_mime_header_destroy</link>           (<link linkend="GMimeHeader">GMimeHeader</link> *header);
void        <link linkend="g-mime-header-set">g_mime_header_set</link>               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const <link linkend="gchar">gchar</link> *name,
                                             const <link linkend="gchar">gchar</link> *value);
const <link linkend="gchar">gchar</link>* <link linkend="g-mime-header-get">g_mime_header_get</link>              (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const <link linkend="gchar">gchar</link> *name);
void        <link linkend="g-mime-header-remove">g_mime_header_remove</link>            (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const <link linkend="gchar">gchar</link> *name);
void        <link linkend="g-mime-header-write-to-string">g_mime_header_write_to_string</link>   (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GString">GString</link> *string);
<link linkend="gchar">gchar</link>*      <link linkend="g-mime-header-to-string">g_mime_header_to_string</link>         (const <link linkend="GMimeHeader">GMimeHeader</link> *header);
void        <link linkend="g-mime-header-foreach">g_mime_header_foreach</link>           (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GMimeHeaderFunc">GMimeHeaderFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> data);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMimeHeaderFunc">GMimeHeaderFunc ()</title>
<programlisting>void        (*GMimeHeaderFunc)              (const <link linkend="gchar">gchar</link> *name,
                                             const <link linkend="gchar">gchar</link> *value,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-new">g_mime_header_new ()</title>
<programlisting><link linkend="GMimeHeader">GMimeHeader</link>* g_mime_header_new              (void);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new header object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-destroy">g_mime_header_destroy ()</title>
<programlisting>void        g_mime_header_destroy           (<link linkend="GMimeHeader">GMimeHeader</link> *header);</programlisting>
<para>
Destroy the header object</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-set">g_mime_header_set ()</title>
<programlisting>void        g_mime_header_set               (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const <link linkend="gchar">gchar</link> *name,
                                             const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Set the value of the specified header. If <parameter>value</parameter> is <literal>NULL</literal> and the
header, <parameter>name</parameter>, had not been previously set, a space will be set
aside for it (useful for setting the order of headers before values
can be obtained for them) otherwise the header will be unset.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> header name
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> header value
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-get">g_mime_header_get ()</title>
<programlisting>const <link linkend="gchar">gchar</link>* g_mime_header_get              (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> header name
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the header requested
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-remove">g_mime_header_remove ()</title>
<programlisting>void        g_mime_header_remove            (<link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Remove the specified header</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> header name
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-write-to-string">g_mime_header_write_to_string ()</title>
<programlisting>void        g_mime_header_write_to_string   (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GString">GString</link> *string);</programlisting>
<para>
Write the headers to a string</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> string
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-to-string">g_mime_header_to_string ()</title>
<programlisting><link linkend="gchar">gchar</link>*      g_mime_header_to_string         (const <link linkend="GMimeHeader">GMimeHeader</link> *header);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a string containing the header block
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-header-foreach">g_mime_header_foreach ()</title>
<programlisting>void        g_mime_header_foreach           (const <link linkend="GMimeHeader">GMimeHeader</link> *header,
                                             <link linkend="GMimeHeaderFunc">GMimeHeaderFunc</link> func,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Calls <parameter>func</parameter> for each header name/value pair.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header object
</entry></row>
<row><entry align="right"><parameter>func</parameter>&nbsp;:</entry>
<entry> function to be called for each header.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> User data to be passed to the func.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
