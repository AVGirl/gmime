<refentry id="gmime-gmime-gpg-context">
<refmeta>
<refentrytitle>gmime-gpg-context</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-gpg-context</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="GMimeGpgContext">GMimeGpgContext</link>;
<link linkend="GMimeCipherContext">GMimeCipherContext</link>* <link linkend="g-mime-gpg-context-new">g_mime_gpg_context_new</link>  (<link linkend="GMimeSession">GMimeSession</link> *session,
                                             const char *path);
<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-gpg-context-get-always-trust">g_mime_gpg_context_get_always_trust</link>
                                            (<link linkend="GMimeGpgContext">GMimeGpgContext</link> *ctx);
void        <link linkend="g-mime-gpg-context-set-always-trust">g_mime_gpg_context_set_always_trust</link>
                                            (<link linkend="GMimeGpgContext">GMimeGpgContext</link> *ctx,
                                             <link linkend="gboolean">gboolean</link> always_trust);


</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMimeGpgContext">struct GMimeGpgContext</title>
<programlisting>struct GMimeGpgContext {
	GMimeCipherContext parent_object;
	
	char *path;
	gboolean always_trust;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-gpg-context-new">g_mime_gpg_context_new ()</title>
<programlisting><link linkend="GMimeCipherContext">GMimeCipherContext</link>* g_mime_gpg_context_new  (<link linkend="GMimeSession">GMimeSession</link> *session,
                                             const char *path);</programlisting>
<para>
Creates a new gpg cipher context object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><para> session
</para></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><para> path to gpg binary
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>a new gpg cipher context object.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-gpg-context-get-always-trust">g_mime_gpg_context_get_always_trust ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    g_mime_gpg_context_get_always_trust
                                            (<link linkend="GMimeGpgContext">GMimeGpgContext</link> *ctx);</programlisting>
<para>
Gets the <parameter>always_trust</parameter> flag on the gpg context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> gpg context
</para></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><para>the <parameter>always_trust</parameter> flag on the gpg context.
</para></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-gpg-context-set-always-trust">g_mime_gpg_context_set_always_trust ()</title>
<programlisting>void        g_mime_gpg_context_set_always_trust
                                            (<link linkend="GMimeGpgContext">GMimeGpgContext</link> *ctx,
                                             <link linkend="gboolean">gboolean</link> always_trust);</programlisting>
<para>
Sets the <parameter>always_trust</parameter> flag on the gpg context which is used for
encryption.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><para> gpg context
</para></listitem></varlistentry>
<varlistentry><term><parameter>always_trust</parameter>&nbsp;:</term>
<listitem><para> always truct flag
</para></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
