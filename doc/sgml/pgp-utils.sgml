<refentry id="gmime-pgp-utils" revision="4 Jan 2001">
<refmeta>
<refentrytitle>pgp-utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>pgp-utils</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="PgpType">PgpType</link>;
enum        <link linkend="PgpHashType">PgpHashType</link>;
<link linkend="gchar">gchar</link>*      (<link linkend="PgpPasswdFunc">*PgpPasswdFunc</link>)                (const <link linkend="gchar">gchar</link> *prompt,
                                             <link linkend="gpointer">gpointer</link> data);
void        <link linkend="pgp-init">pgp_init</link>                        (const <link linkend="gchar">gchar</link> *path,
                                             <link linkend="PgpType">PgpType</link> type,
                                             <link linkend="PgpPasswdFunc">PgpPasswdFunc</link> callback,
                                             <link linkend="gpointer">gpointer</link> data);
<link linkend="gboolean">gboolean</link>    <link linkend="pgp-detect">pgp_detect</link>                      (const <link linkend="gchar">gchar</link> *text);
<link linkend="gboolean">gboolean</link>    <link linkend="pgp-sign-detect">pgp_sign_detect</link>                 (const <link linkend="gchar">gchar</link> *text);
<link linkend="gchar">gchar</link>*      <link linkend="pgp-encrypt">pgp_encrypt</link>                     (const <link linkend="gchar">gchar</link> *in,
                                             <link linkend="gint">gint</link> inlen,
                                             const <link linkend="GPtrArray">GPtrArray</link> *recipients,
                                             <link linkend="gboolean">gboolean</link> sign,
                                             const <link linkend="gchar">gchar</link> *userid,
                                             <link linkend="GMimeException">GMimeException</link> *ex);
<link linkend="gchar">gchar</link>*      <link linkend="pgp-decrypt">pgp_decrypt</link>                     (const <link linkend="gchar">gchar</link> *ciphertext,
                                             <link linkend="gint">gint</link> *outlen,
                                             <link linkend="GMimeException">GMimeException</link> *ex);
<link linkend="gchar">gchar</link>*      <link linkend="pgp-clearsign">pgp_clearsign</link>                   (const <link linkend="gchar">gchar</link> *plaintext,
                                             const <link linkend="gchar">gchar</link> *userid,
                                             <link linkend="PgpHashType">PgpHashType</link> hash,
                                             <link linkend="GMimeException">GMimeException</link> *ex);
<link linkend="gchar">gchar</link>*      <link linkend="pgp-sign">pgp_sign</link>                        (const <link linkend="gchar">gchar</link> *in,
                                             <link linkend="gint">gint</link> inlen,
                                             const <link linkend="gchar">gchar</link> *userid,
                                             <link linkend="PgpHashType">PgpHashType</link> hash,
                                             <link linkend="GMimeException">GMimeException</link> *ex);
<link linkend="gboolean">gboolean</link>    <link linkend="pgp-verify">pgp_verify</link>                      (const <link linkend="gchar">gchar</link> *in,
                                             <link linkend="gint">gint</link> inlen,
                                             const <link linkend="gchar">gchar</link> *sigin,
                                             <link linkend="gint">gint</link> siglen,
                                             <link linkend="GMimeException">GMimeException</link> *ex);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="PgpType">enum PgpType</title>
<programlisting>typedef enum {
	PGP_TYPE_NONE,
	PGP_TYPE_PGP2,
	PGP_TYPE_PGP5,
	PGP_TYPE_GPG
} PgpType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="PgpHashType">enum PgpHashType</title>
<programlisting>typedef enum {
	PGP_HASH_TYPE_NONE,
	PGP_HASH_TYPE_MD5,
	PGP_HASH_TYPE_SHA1
} PgpHashType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="PgpPasswdFunc">PgpPasswdFunc ()</title>
<programlisting><link linkend="gchar">gchar</link>*      (*PgpPasswdFunc)                (const <link linkend="gchar">gchar</link> *prompt,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>prompt</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-init">pgp_init ()</title>
<programlisting>void        pgp_init                        (const <link linkend="gchar">gchar</link> *path,
                                             <link linkend="PgpType">PgpType</link> type,
                                             <link linkend="PgpPasswdFunc">PgpPasswdFunc</link> callback,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Initializes pgp variables</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>path</parameter>&nbsp;:</entry>
<entry> path to pgp
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry> pgp program type
</entry></row>
<row><entry align="right"><parameter>callback</parameter>&nbsp;:</entry>
<entry> function to query for a passphrase
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry> user data
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-detect">pgp_detect ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pgp_detect                      (const <link linkend="gchar">gchar</link> *text);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> input text
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>TRUE if it is found that the text contains a PGP encrypted
block otherwise returns FALSE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-sign-detect">pgp_sign_detect ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pgp_sign_detect                 (const <link linkend="gchar">gchar</link> *text);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> input text
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>TRUE if it is found that the text contains a PGP signed
block otherwise returns FALSE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-encrypt">pgp_encrypt ()</title>
<programlisting><link linkend="gchar">gchar</link>*      pgp_encrypt                     (const <link linkend="gchar">gchar</link> *in,
                                             <link linkend="gint">gint</link> inlen,
                                             const <link linkend="GPtrArray">GPtrArray</link> *recipients,
                                             <link linkend="gboolean">gboolean</link> sign,
                                             const <link linkend="gchar">gchar</link> *userid,
                                             <link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> data to encrypt
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> input length of input data
</entry></row>
<row><entry align="right"><parameter>recipients</parameter>&nbsp;:</entry>
<entry> An array of recipient ids
</entry></row>
<row><entry align="right"><parameter>sign</parameter>&nbsp;:</entry>
<entry> TRUE if you want to sign as well as encrypt
</entry></row>
<row><entry align="right"><parameter>userid</parameter>&nbsp;:</entry>
<entry> userid to use when signing (assuming <link linkend="sign">sign</link> is TRUE)
</entry></row>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the ciphertext.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-decrypt">pgp_decrypt ()</title>
<programlisting><link linkend="gchar">gchar</link>*      pgp_decrypt                     (const <link linkend="gchar">gchar</link> *ciphertext,
                                             <link linkend="gint">gint</link> *outlen,
                                             <link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ciphertext</parameter>&nbsp;:</entry>
<entry> ciphertext to decrypt
</entry></row>
<row><entry align="right"><parameter>outlen</parameter>&nbsp;:</entry>
<entry> output length of the decrypted data (to be set by <link linkend="pgp-decrypt">pgp_decrypt</link>)
</entry></row>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated buffer containing the decrypted ciphertext. If
the cleartext is plain text then you may treat it like a normal
string as it will be NUL terminated, however <link linkend="outlen">outlen</link> is also set in
the case that the cleartext is a binary stream.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-clearsign">pgp_clearsign ()</title>
<programlisting><link linkend="gchar">gchar</link>*      pgp_clearsign                   (const <link linkend="gchar">gchar</link> *plaintext,
                                             const <link linkend="gchar">gchar</link> *userid,
                                             <link linkend="PgpHashType">PgpHashType</link> hash,
                                             <link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>plaintext</parameter>&nbsp;:</entry>
<entry> plain readable text to clearsign
</entry></row>
<row><entry align="right"><parameter>userid</parameter>&nbsp;:</entry>
<entry> userid to sign with
</entry></row>
<row><entry align="right"><parameter>hash</parameter>&nbsp;:</entry>
<entry> Preferred hash function (md5 or sha1)
</entry></row>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the clearsigned plaintext
using the preferred hash.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-sign">pgp_sign ()</title>
<programlisting><link linkend="gchar">gchar</link>*      pgp_sign                        (const <link linkend="gchar">gchar</link> *in,
                                             <link linkend="gint">gint</link> inlen,
                                             const <link linkend="gchar">gchar</link> *userid,
                                             <link linkend="PgpHashType">PgpHashType</link> hash,
                                             <link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input data to sign
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> length of input data
</entry></row>
<row><entry align="right"><parameter>userid</parameter>&nbsp;:</entry>
<entry> userid to sign with
</entry></row>
<row><entry align="right"><parameter>hash</parameter>&nbsp;:</entry>
<entry> preferred hash type (md5 or sha1)
</entry></row>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry> exception
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the detached signature using
the preferred hash.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="pgp-verify">pgp_verify ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    pgp_verify                      (const <link linkend="gchar">gchar</link> *in,
                                             <link linkend="gint">gint</link> inlen,
                                             const <link linkend="gchar">gchar</link> *sigin,
                                             <link linkend="gint">gint</link> siglen,
                                             <link linkend="GMimeException">GMimeException</link> *ex);</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>sigin</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>siglen</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><parameter>ex</parameter>&nbsp;:</entry>
<entry></entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>

</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
