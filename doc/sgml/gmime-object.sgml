<refentry id="gmime-gmime-object">
<refmeta>
<refentrytitle>gmime-object</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-object</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="GMimeObject">GMimeObject</link>;
void        (<link linkend="GMimePartFunc">*GMimePartFunc</link>)                (<link linkend="GMimeObject">GMimeObject</link> *part,
                                             <link linkend="gpointer">gpointer</link> data);
void        <link linkend="g-mime-object-register-type">g_mime_object_register_type</link>     (const char *type,
                                             const char *subtype,
                                             <link linkend="GType">GType</link> object_type);
<link linkend="GMimeObject">GMimeObject</link>* <link linkend="g-mime-object-new-type">g_mime_object_new_type</link>         (const char *type,
                                             const char *subtype);
void        <link linkend="g-mime-object-ref">g_mime_object_ref</link>               (<link linkend="GMimeObject">GMimeObject</link> *object);
void        <link linkend="g-mime-object-unref">g_mime_object_unref</link>             (<link linkend="GMimeObject">GMimeObject</link> *object);
void        <link linkend="g-mime-object-set-content-type">g_mime_object_set_content_type</link>  (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);
const <link linkend="GMimeContentType">GMimeContentType</link>* <link linkend="g-mime-object-get-content-type">g_mime_object_get_content_type</link>
                                            (<link linkend="GMimeObject">GMimeObject</link> *object);
void        <link linkend="g-mime-object-set-content-type-parameter">g_mime_object_set_content_type_parameter</link>
                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *name,
                                             const char *value);
const char* <link linkend="g-mime-object-get-content-type-parameter">g_mime_object_get_content_type_parameter</link>
                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *name);
void        <link linkend="g-mime-object-set-content-id">g_mime_object_set_content_id</link>    (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *content_id);
const char* <link linkend="g-mime-object-get-content-id">g_mime_object_get_content_id</link>    (<link linkend="GMimeObject">GMimeObject</link> *object);
void        <link linkend="g-mime-object-add-header">g_mime_object_add_header</link>        (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header,
                                             const char *value);
void        <link linkend="g-mime-object-set-header">g_mime_object_set_header</link>        (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header,
                                             const char *value);
const char* <link linkend="g-mime-object-get-header">g_mime_object_get_header</link>        (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header);
void        <link linkend="g-mime-object-remove-header">g_mime_object_remove_header</link>     (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header);
char*       <link linkend="g-mime-object-get-headers">g_mime_object_get_headers</link>       (<link linkend="GMimeObject">GMimeObject</link> *object);
<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-object-write-to-stream">g_mime_object_write_to_stream</link>   (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
char*       <link linkend="g-mime-object-to-string">g_mime_object_to_string</link>         (<link linkend="GMimeObject">GMimeObject</link> *object);


</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMimeObject">struct GMimeObject</title>
<programlisting>struct GMimeObject {

	GObject parent_object;
	
	GMimeContentType *content_type;
	GMimeHeader *headers;
	
	char *content_id;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMimePartFunc">GMimePartFunc ()</title>
<programlisting>void        (*GMimePartFunc)                (<link linkend="GMimeObject">GMimeObject</link> *part,
                                             <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>part</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-register-type">g_mime_object_register_type ()</title>
<programlisting>void        g_mime_object_register_type     (const char *type,
                                             const char *subtype,
                                             <link linkend="GType">GType</link> object_type);</programlisting>
<para>
Registers the object type <parameter>object_type</parameter> for use with the
<link linkend="g-mime-object-new-type">g_mime_object_new_type</link> convenience function.
</para>
<para>
Note: You may use the wildcard "*" to match any type and/or
subtype.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> mime type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subtype</parameter>&nbsp;:</term>
<listitem><simpara> mime subtype
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_type</parameter>&nbsp;:</term>
<listitem><simpara> object type
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-new-type">g_mime_object_new_type ()</title>
<programlisting><link linkend="GMimeObject">GMimeObject</link>* g_mime_object_new_type         (const char *type,
                                             const char *subtype);</programlisting>
<para>
Performs a lookup of registered <link linkend="GMimeObject">GMimeObject</link> subclasses, registered
using <link linkend="g-mime-object-register-type">g_mime_object_register_type</link>, to find an appropriate class
capable of handling MIME parts of type <parameter>type</parameter>/<parameter>subtype</parameter>. If no class
has been registered to handle that type, it looks for a registered
class that can handle <parameter>type</parameter>. If that also fails, then it will use
the generic part class, <link linkend="GMimePart">GMimePart</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> mime type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subtype</parameter>&nbsp;:</term>
<listitem><simpara> mime subtype
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an appropriate <link linkend="GMimeObject">GMimeObject</link> registered to handle mime-types
of <parameter>type</parameter>/<parameter>subtype</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-ref">g_mime_object_ref ()</title>
<programlisting>void        g_mime_object_ref               (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
<para>
Ref's a MIME object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-unref">g_mime_object_unref ()</title>
<programlisting>void        g_mime_object_unref             (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
<para>
Unref's a MIME object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-set-content-type">g_mime_object_set_content_type ()</title>
<programlisting>void        g_mime_object_set_content_type  (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);</programlisting>
<para>
Sets the content-type for the specified MIME object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> MIME object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&nbsp;:</term>
<listitem><simpara> MIME type
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-get-content-type">g_mime_object_get_content_type ()</title>
<programlisting>const <link linkend="GMimeContentType">GMimeContentType</link>* g_mime_object_get_content_type
                                            (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
<para>
Gets the Content-Type object for the given MIME object or <literal>NULL</literal> on
fail.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> MIME object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the content-type object for the specified MIME object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-set-content-type-parameter">g_mime_object_set_content_type_parameter ()</title>
<programlisting>void        g_mime_object_set_content_type_parameter
                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *name,
                                             const char *value);</programlisting>
<para>
Sets the content-type param <parameter>name</parameter> to the value <parameter>value</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> MIME object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> param name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> param value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-get-content-type-parameter">g_mime_object_get_content_type_parameter ()</title>
<programlisting>const char* g_mime_object_get_content_type_parameter
                                            (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *name);</programlisting>
<para>
Gets the value of the content-type param <parameter>name</parameter> set on the MIME part
<parameter>object</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> MIME object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> param name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the value of the requested content-type param or <literal>NULL</literal> on
if the param doesn't exist.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-set-content-id">g_mime_object_set_content_id ()</title>
<programlisting>void        g_mime_object_set_content_id    (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *content_id);</programlisting>
<para>
Sets the Content-Id of the MIME object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> MIME object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content_id</parameter>&nbsp;:</term>
<listitem><simpara> content-id (addr-spec portion)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-get-content-id">g_mime_object_get_content_id ()</title>
<programlisting>const char* g_mime_object_get_content_id    (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
<para>
Gets the Content-Id of the MIME object or NULL if one is not set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> MIME object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a const pointer to the Content-Id header.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-add-header">g_mime_object_add_header ()</title>
<programlisting>void        g_mime_object_add_header        (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header,
                                             const char *value);</programlisting>
<para>
Adds an arbitrary header to the MIME object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> header name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> header value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-set-header">g_mime_object_set_header ()</title>
<programlisting>void        g_mime_object_set_header        (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header,
                                             const char *value);</programlisting>
<para>
Sets an arbitrary header on the MIME object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> header name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara> header value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-get-header">g_mime_object_get_header ()</title>
<programlisting>const char* g_mime_object_get_header        (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header);</programlisting>
<para>
Gets the value of the requested header if it exists or <literal>NULL</literal>
otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> header name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the value of the header <parameter>header</parameter> if it exists or <literal>NULL</literal>
otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-remove-header">g_mime_object_remove_header ()</title>
<programlisting>void        g_mime_object_remove_header     (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             const char *header);</programlisting>
<para>
Removed the specified header if it exists.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> header name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-get-headers">g_mime_object_get_headers ()</title>
<programlisting>char*       g_mime_object_get_headers       (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
<para>
Allocates a string buffer containing all of the MIME object's raw
headers.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an allocated string containing all of the raw MIME headers.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-write-to-stream">g_mime_object_write_to_stream ()</title>
<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_object_write_to_stream   (<link linkend="GMimeObject">GMimeObject</link> *object,
                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
<para>
Write the contents of the MIME object to <parameter>stream</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stream</parameter>&nbsp;:</term>
<listitem><simpara> stream
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>-1 on fail.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-object-to-string">g_mime_object_to_string ()</title>
<programlisting>char*       g_mime_object_to_string         (<link linkend="GMimeObject">GMimeObject</link> *object);</programlisting>
<para>
Allocates a string buffer containing the contents of <parameter>object</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&nbsp;:</term>
<listitem><simpara> mime object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an allocated string containing the contents of the mime
object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
