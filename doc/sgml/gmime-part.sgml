<refentry id="gmime-gmime-part">
<refmeta>
<refentrytitle>gmime-part</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-part</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="GMimePart">GMimePart</link>;
<link linkend="GMimePart">GMimePart</link>*  <link linkend="g-mime-part-new">g_mime_part_new</link>                 (void);
<link linkend="GMimePart">GMimePart</link>*  <link linkend="g-mime-part-new-with-type">g_mime_part_new_with_type</link>       (const char *type,
                                             const char *subtype);
void        <link linkend="g-mime-part-set-content-header">g_mime_part_set_content_header</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *header,
                                             const char *value);
const char* <link linkend="g-mime-part-get-content-header">g_mime_part_get_content_header</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *header);
void        <link linkend="g-mime-part-set-content-description">g_mime_part_set_content_description</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *description);
const char* <link linkend="g-mime-part-get-content-description">g_mime_part_get_content_description</link>
                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-content-id">g_mime_part_set_content_id</link>      (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content_id);
const char* <link linkend="g-mime-part-get-content-id">g_mime_part_get_content_id</link>      (<link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-content-md5">g_mime_part_set_content_md5</link>     (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content_md5);
const char* <link linkend="g-mime-part-get-content-md5">g_mime_part_get_content_md5</link>     (<link linkend="GMimePart">GMimePart</link> *mime_part);
<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-part-verify-content-md5">g_mime_part_verify_content_md5</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-content-location">g_mime_part_set_content_location</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content_location);
const char* <link linkend="g-mime-part-get-content-location">g_mime_part_get_content_location</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-content-type">g_mime_part_set_content_type</link>    (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);
const <link linkend="GMimeContentType">GMimeContentType</link>* <link linkend="g-mime-part-get-content-type">g_mime_part_get_content_type</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-encoding">g_mime_part_set_encoding</link>        (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-part-get-encoding">g_mime_part_get_encoding</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
const char* <link linkend="g-mime-part-encoding-to-string">g_mime_part_encoding_to_string</link>  (<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-part-encoding-from-string">g_mime_part_encoding_from_string</link>
                                            (const char *encoding);
void        <link linkend="g-mime-part-set-content-disposition-object">g_mime_part_set_content_disposition_object</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);
void        <link linkend="g-mime-part-set-content-disposition">g_mime_part_set_content_disposition</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *disposition);
const char* <link linkend="g-mime-part-get-content-disposition">g_mime_part_get_content_disposition</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-add-content-disposition-parameter">g_mime_part_add_content_disposition_parameter</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *attribute,
                                             const char *value);
const char* <link linkend="g-mime-part-get-content-disposition-parameter">g_mime_part_get_content_disposition_parameter</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *attribute);
void        <link linkend="g-mime-part-set-filename">g_mime_part_set_filename</link>        (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *filename);
const char* <link linkend="g-mime-part-get-filename">g_mime_part_get_filename</link>        (const <link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-content">g_mime_part_set_content</link>         (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content,
                                             <link linkend="size-t">size_t</link> len);
void        <link linkend="g-mime-part-set-pre-encoded-content">g_mime_part_set_pre_encoded_content</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content,
                                             <link linkend="size-t">size_t</link> len,
                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);
void        <link linkend="g-mime-part-set-content-byte-array">g_mime_part_set_content_byte_array</link>
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GByteArray">GByteArray</link> *content);
const char* <link linkend="g-mime-part-get-content">g_mime_part_get_content</link>         (const <link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="size-t">size_t</link> *len);
const <link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* <link linkend="g-mime-part-get-content-object">g_mime_part_get_content_object</link>
                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);
void        <link linkend="g-mime-part-set-content-object">g_mime_part_set_content_object</link>  (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *content);
<link linkend="ssize-t">ssize_t</link>     <link linkend="g-mime-part-write-to-stream">g_mime_part_write_to_stream</link>     (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeStream">GMimeStream</link> *stream);
char*       <link linkend="g-mime-part-to-string">g_mime_part_to_string</link>           (<link linkend="GMimePart">GMimePart</link> *mime_part);


</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMimePart">struct GMimePart</title>
<programlisting>struct GMimePart {
	GMimeObject parent_object;
	
	GMimePartEncodingType encoding;
	GMimeDisposition *disposition;
	char *content_description;
	char *content_location;
	char *content_md5;
	
	GMimeDataWrapper *content;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-part-new">g_mime_part_new ()</title>
<programlisting><link linkend="GMimePart">GMimePart</link>*  g_mime_part_new                 (void);</programlisting>
<para>
Creates a new MIME Part object with a default content-type of
text/plain.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME Part object with a default content-type of
text/plain.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-new-with-type">g_mime_part_new_with_type ()</title>
<programlisting><link linkend="GMimePart">GMimePart</link>*  g_mime_part_new_with_type       (const char *type,
                                             const char *subtype);</programlisting>
<para>
Creates a new MIME Part with a sepcified type.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry> content-type
</entry></row>
<row><entry align="right"><parameter>subtype</parameter>&nbsp;:</entry>
<entry> content-subtype
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an empty MIME Part object with the specified content-type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-header">g_mime_part_set_content_header ()</title>
<programlisting>void        g_mime_part_set_content_header  (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *header,
                                             const char *value);</programlisting>
<para>
Set an arbitrary MIME content header.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> mime part
</entry></row>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header name
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> header value
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-header">g_mime_part_get_content_header ()</title>
<programlisting>const char* g_mime_part_get_content_header  (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *header);</programlisting>
<para>
Gets the value of the requested header if it exists, or <literal>NULL</literal>
otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> mime part
</entry></row>
<row><entry align="right"><parameter>header</parameter>&nbsp;:</entry>
<entry> header name
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of the content header <parameter>header</parameter>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-description">g_mime_part_set_content_description ()</title>
<programlisting>void        g_mime_part_set_content_description
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *description);</programlisting>
<para>
Set the content description for the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>description</parameter>&nbsp;:</entry>
<entry> content description
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-description">g_mime_part_get_content_description ()</title>
<programlisting>const char* g_mime_part_get_content_description
                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the value of the Content-Description for the specified mime
part if it exists or <literal>NULL</literal> otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content description for the specified mime part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-id">g_mime_part_set_content_id ()</title>
<programlisting>void        g_mime_part_set_content_id      (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content_id);</programlisting>
<para>
Set the content id for the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>content_id</parameter>&nbsp;:</entry>
<entry> content id
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-id">g_mime_part_get_content_id ()</title>
<programlisting>const char* g_mime_part_get_content_id      (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the content-id of the specified mime part if it exists, or
<literal>NULL</literal> otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content id for the specified mime part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-md5">g_mime_part_set_content_md5 ()</title>
<programlisting>void        g_mime_part_set_content_md5     (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content_md5);</programlisting>
<para>
Set the content md5 for the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>content_md5</parameter>&nbsp;:</entry>
<entry> content md5 or NULL to generate the md5 digest.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-md5">g_mime_part_get_content_md5 ()</title>
<programlisting>const char* g_mime_part_get_content_md5     (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the md5sum contained in the Content-Md5 header of the
specified mime part if it exists, or <literal>NULL</literal> otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content md5 for the specified mime part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-verify-content-md5">g_mime_part_verify_content_md5 ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    g_mime_part_verify_content_md5  (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Verify the content md5 for the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>TRUE if the md5 is valid or FALSE otherwise. Note: will
return FALSE if the mime part does not contain a Content-MD5.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-location">g_mime_part_set_content_location ()</title>
<programlisting>void        g_mime_part_set_content_location
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content_location);</programlisting>
<para>
Set the content location for the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>content_location</parameter>&nbsp;:</entry>
<entry> content location
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-location">g_mime_part_get_content_location ()</title>
<programlisting>const char* g_mime_part_get_content_location
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the value of the Content-Location header if it exists, or
<literal>NULL</literal> otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content location for the specified mime part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-type">g_mime_part_set_content_type ()</title>
<programlisting>void        g_mime_part_set_content_type    (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeContentType">GMimeContentType</link> *mime_type);</programlisting>
<para>
Set the content type/subtype for the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>mime_type</parameter>&nbsp;:</entry>
<entry> Mime content-type
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-type">g_mime_part_get_content_type ()</title>
<programlisting>const <link linkend="GMimeContentType">GMimeContentType</link>* g_mime_part_get_content_type
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the Content-Type object for the given mime part or <literal>NULL</literal> on
error.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content-type object for the specified mime part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-encoding">g_mime_part_set_encoding ()</title>
<programlisting>void        g_mime_part_set_encoding        (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
<para>
Set the content encoding for the specified mime part. Available
values for the encoding are: GMIME_PART_ENCODING_DEFAULT,
GMIME_PART_ENCODING_7BIT, GMIME_PART_ENCODING_8BIT,
GMIME_PART_ENCODING_BINARY, GMIME_PART_ENCODING_BASE64 and
GMIME_PART_ENCODING_QUOTEDPRINTABLE.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
<entry> Mime encoding
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-encoding">g_mime_part_get_encoding ()</title>
<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_part_get_encoding
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the content encoding of the mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content encoding for the specified mime part. The
return value will be one of the following:
GMIME_PART_ENCODING_DEFAULT, GMIME_PART_ENCODING_7BIT,
GMIME_PART_ENCODING_8BIT, GMIME_PART_ENCODING_BINARY,
GMIME_PART_ENCODING_BASE64, GMIME_PART_ENCODING_QUOTEDPRINTABLE
or GMIME_PART_ENCODING_UUENCODE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-encoding-to-string">g_mime_part_encoding_to_string ()</title>
<programlisting>const char* g_mime_part_encoding_to_string  (<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
<para>
Gets the string value of the content encoding.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
<entry> Mime encoding
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the encoding type as a string. Available
values for the encoding are: GMIME_PART_ENCODING_DEFAULT,
GMIME_PART_ENCODING_7BIT, GMIME_PART_ENCODING_8BIT,
GMIME_PART_ENCODING_BINARY, GMIME_PART_ENCODING_BASE64,
GMIME_PART_ENCODING_QUOTEDPRINTABLE and
GMIME_PART_ENCODING_UUENCODE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-encoding-from-string">g_mime_part_encoding_from_string ()</title>
<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_part_encoding_from_string
                                            (const char *encoding);</programlisting>
<para>
Gets the content encoding enumeration value based on the input
string.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
<entry> Mime encoding in string format
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the encoding string as a GMimePartEncodingType.  Available
values for the encoding are: GMIME_PART_ENCODING_DEFAULT,
GMIME_PART_ENCODING_7BIT, GMIME_PART_ENCODING_8BIT,
GMIME_PART_ENCODING_BINARY, GMIME_PART_ENCODING_BASE64,
GMIME_PART_ENCODING_QUOTEDPRINTABLE and
GMIME_PART_ENCODING_UUENCODE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-disposition-object">g_mime_part_set_content_disposition_object ()</title>
<programlisting>void        g_mime_part_set_content_disposition_object
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeDisposition">GMimeDisposition</link> *disposition);</programlisting>
<para>
Set the content disposition for the specified mime part</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
<entry> disposition object
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-disposition">g_mime_part_set_content_disposition ()</title>
<programlisting>void        g_mime_part_set_content_disposition
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *disposition);</programlisting>
<para>
Set the content disposition for the specified mime part</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>disposition</parameter>&nbsp;:</entry>
<entry> disposition
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-disposition">g_mime_part_get_content_disposition ()</title>
<programlisting>const char* g_mime_part_get_content_disposition
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the content disposition if set or <literal>NULL</literal> otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the content disposition for the specified mime part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-add-content-disposition-parameter">g_mime_part_add_content_disposition_parameter ()</title>
<programlisting>void        g_mime_part_add_content_disposition_parameter
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *attribute,
                                             const char *value);</programlisting>
<para>
Add a content-disposition parameter to the specified mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
<entry> parameter name
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry> parameter value
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-disposition-parameter">g_mime_part_get_content_disposition_parameter ()</title>
<programlisting>const char* g_mime_part_get_content_disposition_parameter
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *attribute);</programlisting>
<para>
Gets the value of the Content-Disposition parameter specified by
<parameter>attribute</parameter>, or <literal>NULL</literal> if the parameter does not exist.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>attribute</parameter>&nbsp;:</entry>
<entry> parameter name
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the value of a previously defined content-disposition
parameter specified by <link linkend="name">name</link>.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-filename">g_mime_part_set_filename ()</title>
<programlisting>void        g_mime_part_set_filename        (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *filename);</programlisting>
<para>
Sets the "filename" parameter on the Content-Disposition and also sets the
"name" parameter on the Content-Type.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry> the filename of the Mime Part's content
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-filename">g_mime_part_get_filename ()</title>
<programlisting>const char* g_mime_part_get_filename        (const <link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the filename of the specificed mime part, or <literal>NULL</literal> if the mime
part does not have the filename or name parameter set.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the filename of the specified MIME Part. It first checks to
see if the "filename" parameter was set on the Content-Disposition
and if not then checks the "name" parameter in the Content-Type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content">g_mime_part_set_content ()</title>
<programlisting>void        g_mime_part_set_content         (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>
Sets the content of the Mime Part (only non-multiparts)</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
<entry> raw mime part content
</entry></row>
<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
<entry> raw content length
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-pre-encoded-content">g_mime_part_set_pre_encoded_content ()</title>
<programlisting>void        g_mime_part_set_pre_encoded_content
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             const char *content,
                                             <link linkend="size-t">size_t</link> len,
                                             <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> encoding);</programlisting>
<para>
Sets the encoding type and raw content on the mime part after decoding the content.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
<entry> encoded mime part content
</entry></row>
<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
<entry> length of the content
</entry></row>
<row><entry align="right"><parameter>encoding</parameter>&nbsp;:</entry>
<entry> content encoding
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-byte-array">g_mime_part_set_content_byte_array ()</title>
<programlisting>void        g_mime_part_set_content_byte_array
                                            (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GByteArray">GByteArray</link> *content);</programlisting>
<para>
Sets the content of the Mime Part (only non-multiparts)</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> Mime part
</entry></row>
<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
<entry> raw mime part content.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content">g_mime_part_get_content ()</title>
<programlisting>const char* g_mime_part_get_content         (const <link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="size-t">size_t</link> *len);</programlisting>
<para>
Gets the raw contents of the mime part and sets <parameter>len</parameter> to the length
of the raw data buffer.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> MIME part object
</entry></row>
<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
<entry> pointer to the content length
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a const char * pointer to the raw contents of the MIME Part
and sets <literal>len</literal> to the length of the buffer.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-get-content-object">g_mime_part_get_content_object ()</title>
<programlisting>const <link linkend="GMimeDataWrapper">GMimeDataWrapper</link>* g_mime_part_get_content_object
                                            (const <link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Gets the internal data-wrapper of the specified mime part, or <literal>NULL</literal>
on error.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> MIME part object
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the data-wrapper for the mime part's contents.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-set-content-object">g_mime_part_set_content_object ()</title>
<programlisting>void        g_mime_part_set_content_object  (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeDataWrapper">GMimeDataWrapper</link> *content);</programlisting>
<para>
Sets the content object on the mime part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> MIME Part
</entry></row>
<row><entry align="right"><parameter>content</parameter>&nbsp;:</entry>
<entry> content object
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-write-to-stream">g_mime_part_write_to_stream ()</title>
<programlisting><link linkend="ssize-t">ssize_t</link>     g_mime_part_write_to_stream     (<link linkend="GMimePart">GMimePart</link> *mime_part,
                                             <link linkend="GMimeStream">GMimeStream</link> *stream);</programlisting>
<para>
Writes the contents of the MIME Part to <parameter>stream</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> MIME Part
</entry></row>
<row><entry align="right"><parameter>stream</parameter>&nbsp;:</entry>
<entry> output stream
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes written or -1 on fail.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-part-to-string">g_mime_part_to_string ()</title>
<programlisting>char*       g_mime_part_to_string           (<link linkend="GMimePart">GMimePart</link> *mime_part);</programlisting>
<para>
Allocates a string buffer containing the MIME Part.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>mime_part</parameter>&nbsp;:</entry>
<entry> MIME Part
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the MIME Part.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
