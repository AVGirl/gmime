<refentry id="gmime-gmime-utils" revision="2 Mar 2002">
<refmeta>
<refentrytitle>gmime-utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-utils</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="BASE64-ENCODE-LEN-CAPS">BASE64_ENCODE_LEN</link>               (x)
#define     <link linkend="QP-ENCODE-LEN-CAPS">QP_ENCODE_LEN</link>                   (x)
<link linkend="time-t">time_t</link>      <link linkend="g-mime-utils-header-decode-date">g_mime_utils_header_decode_date</link> (const char *in,
                                             int *saveoffset);
char*       <link linkend="g-mime-utils-header-format-date">g_mime_utils_header_format_date</link> (<link linkend="time-t">time_t</link> time,
                                             int offset);
char*       <link linkend="g-mime-utils-header-fold">g_mime_utils_header_fold</link>        (const char *in);
char*       <link linkend="g-mime-utils-header-printf">g_mime_utils_header_printf</link>      (const char *format,
                                             ...);
char*       <link linkend="g-mime-utils-quote-string">g_mime_utils_quote_string</link>       (const char *string);
void        <link linkend="g-mime-utils-unquote-string">g_mime_utils_unquote_string</link>     (char *string);
<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-utils-text-is-8bit">g_mime_utils_text_is_8bit</link>       (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);
<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-utils-best-encoding">g_mime_utils_best_encoding</link>
                                            (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);
char*       <link linkend="g-mime-utils-8bit-header-decode">g_mime_utils_8bit_header_decode</link> (unsigned char *in);
char*       <link linkend="g-mime-utils-8bit-header-encode">g_mime_utils_8bit_header_encode</link> (unsigned char *in);
char*       <link linkend="g-mime-utils-8bit-header-encode-phrase">g_mime_utils_8bit_header_encode_phrase</link>
                                            (unsigned char *in);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-decode-step">g_mime_utils_base64_decode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-encode-close">g_mime_utils_base64_encode_close</link>
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uudecode-step">g_mime_utils_uudecode_step</link>      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step</link>      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uuencode-close">g_mime_utils_uuencode_close</link>     (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-decode-step">g_mime_utils_quoted_decode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *savestate,
                                             int *saved);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-encode-close">g_mime_utils_quoted_encode_close</link>
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BASE64-ENCODE-LEN-CAPS">BASE64_ENCODE_LEN()</title>
<programlisting>#define BASE64_ENCODE_LEN(x) ((size_t) ((x) * 5 / 3) + 4)  /* conservative would be ((x * 4 / 3) + 4) */
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="QP-ENCODE-LEN-CAPS">QP_ENCODE_LEN()</title>
<programlisting>#define QP_ENCODE_LEN(x)     ((size_t) ((x) * 7 / 2) + 4)  /* conservative would be ((x * 3) + 4) */
</programlisting>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>x</parameter>&nbsp;:</entry>
<entry>

</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-decode-date">g_mime_utils_header_decode_date ()</title>
<programlisting><link linkend="time-t">time_t</link>      g_mime_utils_header_decode_date (const char *in,
                                             int *saveoffset);</programlisting>
<para>
Decodes the rfc822 date string and saves the GMT offset into
<parameter>saveoffset</parameter> if non-NULL.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input date string
</entry></row>
<row><entry align="right"><parameter>saveoffset</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the time_t representation of the date string specified by
<parameter>in</parameter>. If 'saveoffset' is non-NULL, the value of the timezone offset
will be stored.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-format-date">g_mime_utils_header_format_date ()</title>
<programlisting>char*       g_mime_utils_header_format_date (<link linkend="time-t">time_t</link> time,
                                             int offset);</programlisting>
<para>
Allocates a string buffer containing the rfc822 formatted date
string represented by <parameter>time</parameter> and <parameter>offset</parameter>.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>time</parameter>&nbsp;:</entry>
<entry> time_t date representation
</entry></row>
<row><entry align="right"><parameter>offset</parameter>&nbsp;:</entry>
<entry> Timezone offset
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a valid string representation of the date.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-fold">g_mime_utils_header_fold ()</title>
<programlisting>char*       g_mime_utils_header_fold        (const char *in);</programlisting>
<para>
Folds a header according to the rules in rfc822.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input header string
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the folded header.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-printf">g_mime_utils_header_printf ()</title>
<programlisting>char*       g_mime_utils_header_printf      (const char *format,
                                             ...);</programlisting>
<para>
Allocates a buffer containing a formatted header specified by the
<parameter>Varargs</parameter>.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>format</parameter>&nbsp;:</entry>
<entry> string format
</entry></row>
<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
<entry> arguments
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the folded header specified
by <parameter>format</parameter> and the following arguments.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quote-string">g_mime_utils_quote_string ()</title>
<programlisting>char*       g_mime_utils_quote_string       (const char *string);</programlisting>
<para>
Quotes <parameter>string</parameter> as needed according to the rules in rfc2045.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> input string
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>an allocated string containing the escaped and quoted (if
needed to be) input string. The decision to quote the string is
based on whether or not the input string contains any 'tspecials'
as defined by rfc2045.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-unquote-string">g_mime_utils_unquote_string ()</title>
<programlisting>void        g_mime_utils_unquote_string     (char *string);</programlisting>
<para>
Unquotes and unescapes a string.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>string</parameter>&nbsp;:</entry>
<entry> string
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-text-is-8bit">g_mime_utils_text_is_8bit ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    g_mime_utils_text_is_8bit       (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>
Determines if <parameter>text</parameter> contains 8bit characters within the first <parameter>len</parameter>
bytes.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> text to check for 8bit chars
</entry></row>
<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
<entry> text length
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>TRUE if the text contains 8bit characters or FALSE
otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-best-encoding">g_mime_utils_best_encoding ()</title>
<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_utils_best_encoding
                                            (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>
Determines the best content encoding for the first <parameter>len</parameter> bytes of
<parameter>text</parameter>.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>text</parameter>&nbsp;:</entry>
<entry> text to encode
</entry></row>
<row><entry align="right"><parameter>len</parameter>&nbsp;:</entry>
<entry> text length
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a GMimePartEncodingType that is determined to be the best
encoding type for the specified block of text. ("best" in this
particular case means best compression)
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-8bit-header-decode">g_mime_utils_8bit_header_decode ()</title>
<programlisting>char*       g_mime_utils_8bit_header_decode (unsigned char *in);</programlisting>
<para>
Decodes and rfc2047 encoded header.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> header to decode
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the mime encoded header as 8bit text.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-8bit-header-encode">g_mime_utils_8bit_header_encode ()</title>
<programlisting>char*       g_mime_utils_8bit_header_encode (unsigned char *in);</programlisting>
<para>
Encodes a header according to the rules in rfc2047.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> header to encode
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the header as several encoded atoms. Useful for encoding
headers like "Subject".
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-8bit-header-encode-phrase">g_mime_utils_8bit_header_encode_phrase ()</title>
<programlisting>char*       g_mime_utils_8bit_header_encode_phrase
                                            (unsigned char *in);</programlisting>
<para>
Encodes a header phrase according to the rules in rfc2047.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> header to encode
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the header phrase as 1 encoded atom. Useful for encoding
internet addresses.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-base64-decode-step">g_mime_utils_base64_decode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_decode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Decodes a chunk of base64 encoded data.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> max length of data to decode
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output stream
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been decoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded (which have been dumped in <parameter>out</parameter>).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_encode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Base64 encodes a chunk of data. Performs an 'encode step', only
encodes blocks of 3 characters to the output at a time, saves
left-over state in state and save (initialise to 0 on first
invocation).</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> length of the input
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output string
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been encoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-base64-encode-close">g_mime_utils_base64_encode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_encode_close
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Base64 encodes the input stream to the output stream. Call this
when finished encoding data with g_mime_utils_base64_encode_step to
flush off the last little bit.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> length of the input
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output string
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been encoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-uudecode-step">g_mime_utils_uudecode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uudecode_step      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Uudecodes a chunk of data. Performs a 'decode step' on a chunk of
uuencoded data. Assumes the "begin &lt;mode&gt; &lt;file name&gt;" line has
been stripped off.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> max length of data to decode (normally strlen (in) ??)
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output stream
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been decoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uuencode_step      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Uuencodes a chunk of data. Performs an 'encode step', only encodes
blocks of 45 characters to the output at a time, saves left-over
state in <parameter>uubuf</parameter>, <parameter>state</parameter> and <parameter>save</parameter> (initialize to 0 on first
invocation).</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> input stream length
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output stream
</entry></row>
<row><entry align="right"><parameter>uubuf</parameter>&nbsp;:</entry>
<entry> temporary buffer of 60 bytes
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been encoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-uuencode-close">g_mime_utils_uuencode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uuencode_close     (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Uuencodes a chunk of data. Call this when finished encoding data
with g_mime_utils_uuencode_step to flush off the last little bit.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> input stream length
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output stream
</entry></row>
<row><entry align="right"><parameter>uubuf</parameter>&nbsp;:</entry>
<entry> temporary buffer of 60 bytes
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been encoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quoted-decode-step">g_mime_utils_quoted_decode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_decode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *savestate,
                                             int *saved);</programlisting>
<para>
Decodes a block of quoted-printable encoded data. Performs a
'decode step' on a chunk of QP encoded data.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> max length of data to decode
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output stream
</entry></row>
<row><entry align="right"><parameter>savestate</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>saved</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been decoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_encode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);</programlisting>
<para>
Quoted-printable encodes a block of text. Performs an 'encode
step', saves left-over state in state and save (initialise to -1 on
first invocation).</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> length of the input
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output string
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been encoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quoted-encode-close">g_mime_utils_quoted_encode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_encode_close
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);</programlisting>
<para>
Quoted-printable encodes a block of text. Call this when finished
encoding data with g_mime_utils_quoted_encode_step to flush off the
last little bit.</para>
<para>

</para><informaltable pgwide=1 frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input stream
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> length of the input
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output string
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> holds the number of bits that are stored in <parameter>save</parameter>
</entry></row>
<row><entry align="right"><parameter>save</parameter>&nbsp;:</entry>
<entry> leftover bits that have not yet been encoded
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
