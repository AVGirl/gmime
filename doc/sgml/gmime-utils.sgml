<refentry id="gmime-gmime-utils">
<refmeta>
<refentrytitle>gmime-utils</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-utils</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="BASE64-ENCODE-LEN-CAPS">BASE64_ENCODE_LEN</link>               (x)
#define     <link linkend="QP-ENCODE-LEN-CAPS">QP_ENCODE_LEN</link>                   (x)
enum        <link linkend="GMimePartEncodingType">GMimePartEncodingType</link>;
struct      <link linkend="GMimeReferences">GMimeReferences</link>;
<link linkend="time-t">time_t</link>      <link linkend="g-mime-utils-header-decode-date">g_mime_utils_header_decode_date</link> (const char *in,
                                             int *saveoffset);
char*       <link linkend="g-mime-utils-header-format-date">g_mime_utils_header_format_date</link> (<link linkend="time-t">time_t</link> time,
                                             int offset);
char*       <link linkend="g-mime-utils-generate-message-id">g_mime_utils_generate_message_id</link>
                                            (const char *fqdn);
char*       <link linkend="g-mime-utils-decode-message-id">g_mime_utils_decode_message_id</link>  (const char *message_id);
<link linkend="GMimeReferences">GMimeReferences</link>* <link linkend="g-mime-references-decode">g_mime_references_decode</link>   (const char *text);
void        <link linkend="g-mime-references-append">g_mime_references_append</link>        (<link linkend="GMimeReferences">GMimeReferences</link> **refs,
                                             const char *msgid);
void        <link linkend="g-mime-references-clear">g_mime_references_clear</link>         (<link linkend="GMimeReferences">GMimeReferences</link> **refs);
char*       <link linkend="g-mime-utils-header-fold">g_mime_utils_header_fold</link>        (const char *in);
char*       <link linkend="g-mime-utils-header-printf">g_mime_utils_header_printf</link>      (const char *format,
                                             ...);
char*       <link linkend="g-mime-utils-quote-string">g_mime_utils_quote_string</link>       (const char *string);
void        <link linkend="g-mime-utils-unquote-string">g_mime_utils_unquote_string</link>     (char *string);
<link linkend="gboolean">gboolean</link>    <link linkend="g-mime-utils-text-is-8bit">g_mime_utils_text_is_8bit</link>       (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);
<link linkend="GMimePartEncodingType">GMimePartEncodingType</link> <link linkend="g-mime-utils-best-encoding">g_mime_utils_best_encoding</link>
                                            (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);
char*       <link linkend="g-mime-utils-8bit-header-decode">g_mime_utils_8bit_header_decode</link> (unsigned char *in);
char*       <link linkend="g-mime-utils-8bit-header-encode">g_mime_utils_8bit_header_encode</link> (unsigned char *in);
char*       <link linkend="g-mime-utils-8bit-header-encode-phrase">g_mime_utils_8bit_header_encode_phrase</link>
                                            (unsigned char *in);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-decode-step">g_mime_utils_base64_decode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-base64-encode-close">g_mime_utils_base64_encode_close</link>
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
#define     <link linkend="GMIME-UUDECODE-STATE-INIT-CAPS">GMIME_UUDECODE_STATE_INIT</link>
#define     <link linkend="GMIME-UUDECODE-STATE-BEGIN-CAPS">GMIME_UUDECODE_STATE_BEGIN</link>
#define     <link linkend="GMIME-UUDECODE-STATE-END-CAPS">GMIME_UUDECODE_STATE_END</link>
#define     <link linkend="GMIME-UUDECODE-STATE-MASK-CAPS">GMIME_UUDECODE_STATE_MASK</link>
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uudecode-step">g_mime_utils_uudecode_step</link>      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step</link>      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-uuencode-close">g_mime_utils_uuencode_close</link>     (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-decode-step">g_mime_utils_quoted_decode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *savestate,
                                             int *saved);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step</link> (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-utils-quoted-encode-close">g_mime_utils_quoted_encode_close</link>
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BASE64-ENCODE-LEN-CAPS">BASE64_ENCODE_LEN()</title>
<programlisting>#define BASE64_ENCODE_LEN(x) ((size_t) ((x) * 5 / 3) + 4)  /* conservative would be ((x * 4 / 3) + 4) */
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="QP-ENCODE-LEN-CAPS">QP_ENCODE_LEN()</title>
<programlisting>#define QP_ENCODE_LEN(x)     ((size_t) ((x) * 7 / 2) + 4)  /* conservative would be ((x * 3) + 4) */
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GMimePartEncodingType">enum GMimePartEncodingType</title>
<programlisting>typedef enum {
	GMIME_PART_ENCODING_DEFAULT,
	GMIME_PART_ENCODING_7BIT,
	GMIME_PART_ENCODING_8BIT,
	GMIME_PART_ENCODING_BINARY,
	GMIME_PART_ENCODING_BASE64,
	GMIME_PART_ENCODING_QUOTEDPRINTABLE,
	GMIME_PART_ENCODING_UUENCODE,
	GMIME_PART_NUM_ENCODINGS
} GMimePartEncodingType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMimeReferences">struct GMimeReferences</title>
<programlisting>struct GMimeReferences {

	struct _GMimeReferences *next;
	char *msgid;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-decode-date">g_mime_utils_header_decode_date ()</title>
<programlisting><link linkend="time-t">time_t</link>      g_mime_utils_header_decode_date (const char *in,
                                             int *saveoffset);</programlisting>
<para>
Decodes the rfc822 date string and saves the GMT offset into
<parameter>saveoffset</parameter> if non-NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input date string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>saveoffset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the time_t representation of the date string specified by
<parameter>in</parameter>. If 'saveoffset' is non-NULL, the value of the timezone offset
will be stored.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-format-date">g_mime_utils_header_format_date ()</title>
<programlisting>char*       g_mime_utils_header_format_date (<link linkend="time-t">time_t</link> time,
                                             int offset);</programlisting>
<para>
Allocates a string buffer containing the rfc822 formatted date
string represented by <parameter>time</parameter> and <parameter>offset</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>time</parameter>&nbsp;:</term>
<listitem><simpara> time_t date representation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&nbsp;:</term>
<listitem><simpara> Timezone offset
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a valid string representation of the date.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-generate-message-id">g_mime_utils_generate_message_id ()</title>
<programlisting>char*       g_mime_utils_generate_message_id
                                            (const char *fqdn);</programlisting>
<para>
Generates a unique Message-Id.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>fqdn</parameter>&nbsp;:</term>
<listitem><simpara> Fully qualified domain name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a unique string in an addr-spec format suitable for use as
a Message-Id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-decode-message-id">g_mime_utils_decode_message_id ()</title>
<programlisting>char*       g_mime_utils_decode_message_id  (const char *message_id);</programlisting>
<para>
Decodes a msg-id as defined by rfc822.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>message_id</parameter>&nbsp;:</term>
<listitem><simpara> string containing a message-id
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the addr-spec portion of the msg-id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-references-decode">g_mime_references_decode ()</title>
<programlisting><link linkend="GMimeReferences">GMimeReferences</link>* g_mime_references_decode   (const char *text);</programlisting>
<para>
Decodes a list of msg-ids as in the References and/or In-Reply-To
headers defined in rfc822.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> string containing a list of msg-ids
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a list of referenced msg-ids.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-references-append">g_mime_references_append ()</title>
<programlisting>void        g_mime_references_append        (<link linkend="GMimeReferences">GMimeReferences</link> **refs,
                                             const char *msgid);</programlisting>
<para>
Appends a reference to msgid to the list of references.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>refs</parameter>&nbsp;:</term>
<listitem><simpara> the address of a GMimeReferences list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msgid</parameter>&nbsp;:</term>
<listitem><simpara> a message-id string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-references-clear">g_mime_references_clear ()</title>
<programlisting>void        g_mime_references_clear         (<link linkend="GMimeReferences">GMimeReferences</link> **refs);</programlisting>
<para>
Clears the GMimeReferences list and resets it to <literal>NULL</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>refs</parameter>&nbsp;:</term>
<listitem><simpara> address of a GMimeReferences list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-fold">g_mime_utils_header_fold ()</title>
<programlisting>char*       g_mime_utils_header_fold        (const char *in);</programlisting>
<para>
Folds a header according to the rules in rfc822.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input header string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an allocated string containing the folded header.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-header-printf">g_mime_utils_header_printf ()</title>
<programlisting>char*       g_mime_utils_header_printf      (const char *format,
                                             ...);</programlisting>
<para>
Allocates a buffer containing a formatted header specified by the
<parameter>Varargs</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> string format
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> arguments
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an allocated string containing the folded header specified
by <parameter>format</parameter> and the following arguments.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quote-string">g_mime_utils_quote_string ()</title>
<programlisting>char*       g_mime_utils_quote_string       (const char *string);</programlisting>
<para>
Quotes <parameter>string</parameter> as needed according to the rules in rfc2045.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara> input string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>an allocated string containing the escaped and quoted (if
needed to be) input string. The decision to quote the string is
based on whether or not the input string contains any 'tspecials'
as defined by rfc2045.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-unquote-string">g_mime_utils_unquote_string ()</title>
<programlisting>void        g_mime_utils_unquote_string     (char *string);</programlisting>
<para>
Unquotes and unescapes a string.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&nbsp;:</term>
<listitem><simpara> string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-text-is-8bit">g_mime_utils_text_is_8bit ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    g_mime_utils_text_is_8bit       (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>
Determines if <parameter>text</parameter> contains 8bit characters within the first <parameter>len</parameter>
bytes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> text to check for 8bit chars
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> text length
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><literal>TRUE</literal> if the text contains 8bit characters or <literal>FALSE</literal>
otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-best-encoding">g_mime_utils_best_encoding ()</title>
<programlisting><link linkend="GMimePartEncodingType">GMimePartEncodingType</link> g_mime_utils_best_encoding
                                            (unsigned char *text,
                                             <link linkend="size-t">size_t</link> len);</programlisting>
<para>
Determines the best content encoding for the first <parameter>len</parameter> bytes of
<parameter>text</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>text</parameter>&nbsp;:</term>
<listitem><simpara> text to encode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> text length
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a <link linkend="GMimePartEncodingType">GMimePartEncodingType</link> that is determined to be the best
encoding type for the specified block of text. ("best" in this
particular case means best compression)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-8bit-header-decode">g_mime_utils_8bit_header_decode ()</title>
<programlisting>char*       g_mime_utils_8bit_header_decode (unsigned char *in);</programlisting>
<para>
Decodes and rfc2047 encoded header.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> header to decode
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the mime encoded header as 8bit text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-8bit-header-encode">g_mime_utils_8bit_header_encode ()</title>
<programlisting>char*       g_mime_utils_8bit_header_encode (unsigned char *in);</programlisting>
<para>
Encodes a header according to the rules in rfc2047.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> header to encode
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the header as several encoded atoms. Useful for encoding
headers like "Subject".
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-8bit-header-encode-phrase">g_mime_utils_8bit_header_encode_phrase ()</title>
<programlisting>char*       g_mime_utils_8bit_header_encode_phrase
                                            (unsigned char *in);</programlisting>
<para>
Encodes a header phrase according to the rules in rfc2047.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> header to encode
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the header phrase as 1 encoded atom. Useful for encoding
internet addresses.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-base64-decode-step">g_mime_utils_base64_decode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_decode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Decodes a chunk of base64 encoded data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> max length of data to decode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been decoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes decoded (which have been dumped in <parameter>out</parameter>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_encode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Base64 encodes a chunk of data. Performs an 'encode step', only
encodes blocks of 3 characters to the output at a time, saves
left-over state in state and save (initialise to 0 on first
invocation).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> length of the input
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been encoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes encoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-base64-encode-close">g_mime_utils_base64_encode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_base64_encode_close
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Base64 encodes the input stream to the output stream. Call this
when finished encoding data with <link linkend="g-mime-utils-base64-encode-step">g_mime_utils_base64_encode_step</link>
to flush off the last little bit.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> length of the input
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been encoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes encoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GMIME-UUDECODE-STATE-INIT-CAPS">GMIME_UUDECODE_STATE_INIT</title>
<programlisting>#define GMIME_UUDECODE_STATE_INIT   (0)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-UUDECODE-STATE-BEGIN-CAPS">GMIME_UUDECODE_STATE_BEGIN</title>
<programlisting>#define GMIME_UUDECODE_STATE_BEGIN  (1 &lt;&lt; 16)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-UUDECODE-STATE-END-CAPS">GMIME_UUDECODE_STATE_END</title>
<programlisting>#define GMIME_UUDECODE_STATE_END    (1 &lt;&lt; 17)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-UUDECODE-STATE-MASK-CAPS">GMIME_UUDECODE_STATE_MASK</title>
<programlisting>#define GMIME_UUDECODE_STATE_MASK   (GMIME_UUDECODE_STATE_BEGIN | GMIME_UUDECODE_STATE_END)
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-uudecode-step">g_mime_utils_uudecode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uudecode_step      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Uudecodes a chunk of data. Performs a 'decode step' on a chunk of
uuencoded data. Assumes the "begin &lt;mode&gt; &lt;file name&gt;" line has
been stripped off.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> max length of data to decode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been decoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes decoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uuencode_step      (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Uuencodes a chunk of data. Performs an 'encode step', only encodes
blocks of 45 characters to the output at a time, saves left-over
state in <parameter>uubuf</parameter>, <parameter>state</parameter> and <parameter>save</parameter> (initialize to 0 on first
invocation).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> input stream length
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uubuf</parameter>&nbsp;:</term>
<listitem><simpara> temporary buffer of 60 bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been encoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes encoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-uuencode-close">g_mime_utils_uuencode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_uuencode_close     (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             unsigned char *uubuf,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *save);</programlisting>
<para>
Uuencodes a chunk of data. Call this when finished encoding data
with <link linkend="g-mime-utils-uuencode-step">g_mime_utils_uuencode_step</link> to flush off the last little bit.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> input stream length
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uubuf</parameter>&nbsp;:</term>
<listitem><simpara> temporary buffer of 60 bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been encoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes encoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quoted-decode-step">g_mime_utils_quoted_decode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_decode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *savestate,
                                             int *saved);</programlisting>
<para>
Decodes a block of quoted-printable encoded data. Performs a
'decode step' on a chunk of QP encoded data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> max length of data to decode
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>savestate</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>saved</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been decoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes decoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_encode_step (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);</programlisting>
<para>
Quoted-printable encodes a block of text. Performs an 'encode
step', saves left-over state in state and save (initialise to -1 on
first invocation).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> length of the input
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been encoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes encoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="g-mime-utils-quoted-encode-close">g_mime_utils_quoted_encode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_utils_quoted_encode_close
                                            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             int *save);</programlisting>
<para>
Quoted-printable encodes a block of text. Call this when finished
encoding data with <link linkend="g-mime-utils-quoted-encode-step">g_mime_utils_quoted_encode_step</link> to flush off
the last little bit.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara> input stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&nbsp;:</term>
<listitem><simpara> length of the input
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> output string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&nbsp;:</term>
<listitem><simpara> holds the number of bits that are stored in <parameter>save</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>save</parameter>&nbsp;:</term>
<listitem><simpara> leftover bits that have not yet been encoded
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes encoded.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
