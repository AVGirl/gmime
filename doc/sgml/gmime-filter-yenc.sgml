<refentry id="gmime-gmime-filter-yenc">
<refmeta>
<refentrytitle>gmime-filter-yenc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GMIME Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gmime-filter-yenc</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="GMIME-YENCODE-CRC-INIT-CAPS">GMIME_YENCODE_CRC_INIT</link>
#define     <link linkend="GMIME-YENCODE-CRC-FINAL-CAPS">GMIME_YENCODE_CRC_FINAL</link>         (crc)
<link linkend="size-t">size_t</link>      <link linkend="g-mime-ydecode-step">g_mime_ydecode_step</link>             (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *pcrc,
                                             <link linkend="guint32">guint32</link> *crc);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-yencode-step">g_mime_yencode_step</link>             (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *pcrc,
                                             <link linkend="guint32">guint32</link> *crc);
<link linkend="size-t">size_t</link>      <link linkend="g-mime-yencode-close">g_mime_yencode_close</link>            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *pcrc,
                                             <link linkend="guint32">guint32</link> *crc);
enum        <link linkend="GMimeFilterYencDirection">GMimeFilterYencDirection</link>;
#define     <link linkend="GMIME-YENCODE-STATE-INIT-CAPS">GMIME_YENCODE_STATE_INIT</link>
#define     <link linkend="GMIME-YDECODE-STATE-INIT-CAPS">GMIME_YDECODE_STATE_INIT</link>
#define     <link linkend="GMIME-YDECODE-STATE-EOLN-CAPS">GMIME_YDECODE_STATE_EOLN</link>
#define     <link linkend="GMIME-YDECODE-STATE-ESCAPE-CAPS">GMIME_YDECODE_STATE_ESCAPE</link>
#define     <link linkend="GMIME-YDECODE-STATE-BEGIN-CAPS">GMIME_YDECODE_STATE_BEGIN</link>
#define     <link linkend="GMIME-YDECODE-STATE-PART-CAPS">GMIME_YDECODE_STATE_PART</link>
#define     <link linkend="GMIME-YDECODE-STATE-DECODE-CAPS">GMIME_YDECODE_STATE_DECODE</link>
#define     <link linkend="GMIME-YDECODE-STATE-END-CAPS">GMIME_YDECODE_STATE_END</link>
<link linkend="GMimeFilter">GMimeFilter</link>* <link linkend="g-mime-filter-yenc-new">g_mime_filter_yenc_new</link>         (<link linkend="GMimeFilterYencDirection">GMimeFilterYencDirection</link> direction);
void        <link linkend="g-mime-filter-yenc-set-state">g_mime_filter_yenc_set_state</link>    (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
                                             int state);
void        <link linkend="g-mime-filter-yenc-set-crc">g_mime_filter_yenc_set_crc</link>      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
                                             <link linkend="guint32">guint32</link> crc);
<link linkend="guint32">guint32</link>     <link linkend="g-mime-filter-yenc-get-crc">g_mime_filter_yenc_get_crc</link>      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);
<link linkend="guint32">guint32</link>     <link linkend="g-mime-filter-yenc-get-pcrc">g_mime_filter_yenc_get_pcrc</link>     (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GMIME-YENCODE-CRC-INIT-CAPS">GMIME_YENCODE_CRC_INIT</title>
<programlisting>#define     GMIME_YENCODE_CRC_INIT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YENCODE-CRC-FINAL-CAPS">GMIME_YENCODE_CRC_FINAL()</title>
<programlisting>#define     GMIME_YENCODE_CRC_FINAL(crc)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-ydecode-step">g_mime_ydecode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_ydecode_step             (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *pcrc,
                                             <link linkend="guint32">guint32</link> *crc);</programlisting>
<para>
Performs a 'decode step' on a chunk of yEncoded data of length
<parameter>inlen</parameter> pointed to by <parameter>in</parameter> and writes to <parameter>out</parameter>. Assumes the =ybegin
and =ypart lines have already been stripped off.
</para>
<para>
To get the crc32 value of the part, use GMIME_YENCODE_CRC_FINAL
(<parameter>pcrc</parameter>). If there are more parts, you should reuse <parameter>crc</parameter> without
re-initializing. Once all parts have been decoded, you may get the
combined crc32 value of all the parts using GMIME_YENCODE_CRC_FINAL
(<parameter>crc</parameter>).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input buffer
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> input buffer length
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output buffer
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> ydecode state
</entry></row>
<row><entry align="right"><parameter>pcrc</parameter>&nbsp;:</entry>
<entry> part crc state
</entry></row>
<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
<entry> crc state
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes decoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-yencode-step">g_mime_yencode_step ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_yencode_step             (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *pcrc,
                                             <link linkend="guint32">guint32</link> *crc);</programlisting>
<para>
Performs an yEncode 'encode step' on a chunk of raw data of length
<parameter>inlen</parameter> pointed to by <parameter>in</parameter> and writes to <parameter>out</parameter>.
</para>
<para>
<parameter>state</parameter> should be initialized to GMIME_YENCODE_STATE_INIT before
beginning making the first call to this function. Subsequent calls
should reuse <parameter>state</parameter>.
</para>
<para>
Along the same lines, <parameter>pcrc</parameter> and <parameter>crc</parameter> should be initialized to
GMIME_YENCODE_CRC_INIT before using.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input buffer
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> input buffer length
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output buffer
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> yencode state
</entry></row>
<row><entry align="right"><parameter>pcrc</parameter>&nbsp;:</entry>
<entry> part crc state
</entry></row>
<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
<entry> crc state
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-yencode-close">g_mime_yencode_close ()</title>
<programlisting><link linkend="size-t">size_t</link>      g_mime_yencode_close            (unsigned char *in,
                                             <link linkend="size-t">size_t</link> inlen,
                                             unsigned char *out,
                                             int *state,
                                             <link linkend="guint32">guint32</link> *pcrc,
                                             <link linkend="guint32">guint32</link> *crc);</programlisting>
<para>
Call this function when finished encoding data with
g_mime_yencode_step to flush off the remaining state.
</para>
<para>
GMIME_YENCODE_CRC_FINAL (<parameter>pcrc</parameter>) will give you the crc32 of the
encoded "part". If there are more "parts" to encode, you should
re-use <parameter>crc</parameter> when encoding the next "parts" and then use
GMIME_YENCODE_CRC_FINAL (<parameter>crc</parameter>) to get the combined crc32 value of
all the parts.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>in</parameter>&nbsp;:</entry>
<entry> input buffer
</entry></row>
<row><entry align="right"><parameter>inlen</parameter>&nbsp;:</entry>
<entry> input buffer length
</entry></row>
<row><entry align="right"><parameter>out</parameter>&nbsp;:</entry>
<entry> output buffer
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> yencode state
</entry></row>
<row><entry align="right"><parameter>pcrc</parameter>&nbsp;:</entry>
<entry> part crc state
</entry></row>
<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
<entry> crc state
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes encoded.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="GMimeFilterYencDirection">enum GMimeFilterYencDirection</title>
<programlisting>typedef enum {
	GMIME_FILTER_YENC_DIRECTION_ENCODE,
	GMIME_FILTER_YENC_DIRECTION_DECODE,
} GMimeFilterYencDirection;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YENCODE-STATE-INIT-CAPS">GMIME_YENCODE_STATE_INIT</title>
<programlisting>#define     GMIME_YENCODE_STATE_INIT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-INIT-CAPS">GMIME_YDECODE_STATE_INIT</title>
<programlisting>#define     GMIME_YDECODE_STATE_INIT</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-EOLN-CAPS">GMIME_YDECODE_STATE_EOLN</title>
<programlisting>#define     GMIME_YDECODE_STATE_EOLN</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-ESCAPE-CAPS">GMIME_YDECODE_STATE_ESCAPE</title>
<programlisting>#define     GMIME_YDECODE_STATE_ESCAPE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-BEGIN-CAPS">GMIME_YDECODE_STATE_BEGIN</title>
<programlisting>#define     GMIME_YDECODE_STATE_BEGIN</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-PART-CAPS">GMIME_YDECODE_STATE_PART</title>
<programlisting>#define     GMIME_YDECODE_STATE_PART</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-DECODE-CAPS">GMIME_YDECODE_STATE_DECODE</title>
<programlisting>#define     GMIME_YDECODE_STATE_DECODE</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GMIME-YDECODE-STATE-END-CAPS">GMIME_YDECODE_STATE_END</title>
<programlisting>#define     GMIME_YDECODE_STATE_END</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="g-mime-filter-yenc-new">g_mime_filter_yenc_new ()</title>
<programlisting><link linkend="GMimeFilter">GMimeFilter</link>* g_mime_filter_yenc_new         (<link linkend="GMimeFilterYencDirection">GMimeFilterYencDirection</link> direction);</programlisting>
<para>
Creates a new yEnc filter.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>direction</parameter>&nbsp;:</entry>
<entry> encode direction
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>a new yEnc filter.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-filter-yenc-set-state">g_mime_filter_yenc_set_state ()</title>
<programlisting>void        g_mime_filter_yenc_set_state    (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
                                             int state);</programlisting>
<para>
Sets the current state of the yencoder/ydecoder</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
<entry> yEnc filter
</entry></row>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> encode/decode state
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-filter-yenc-set-crc">g_mime_filter_yenc_set_crc ()</title>
<programlisting>void        g_mime_filter_yenc_set_crc      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc,
                                             <link linkend="guint32">guint32</link> crc);</programlisting>
<para>
Sets the current crc32 value on the yEnc filter <parameter>yenc</parameter> to <parameter>crc</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
<entry> yEnc filter
</entry></row>
<row><entry align="right"><parameter>crc</parameter>&nbsp;:</entry>
<entry> crc32
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-filter-yenc-get-crc">g_mime_filter_yenc_get_crc ()</title>
<programlisting><link linkend="guint32">guint32</link>     g_mime_filter_yenc_get_crc      (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);</programlisting>
<para>
Get the computed crc or (guint32) -1 on fail.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
<entry> yEnc filter
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the computed crc or (guint32) -1 on fail.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="g-mime-filter-yenc-get-pcrc">g_mime_filter_yenc_get_pcrc ()</title>
<programlisting><link linkend="guint32">guint32</link>     g_mime_filter_yenc_get_pcrc     (<link linkend="GMimeFilterYenc">GMimeFilterYenc</link> *yenc);</programlisting>
<para>
Get the computed part crc or (guint32) -1 on fail.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>yenc</parameter>&nbsp;:</entry>
<entry> yEnc filter
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the computed part crc or (guint32) -1 on fail.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
