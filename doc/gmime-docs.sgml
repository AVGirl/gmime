<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!entity gmime-param SYSTEM "sgml/gmime-param.sgml">
<!entity gmime-header SYSTEM "sgml/gmime-header.sgml">
<!entity gmime-content-type SYSTEM "sgml/gmime-content-type.sgml">
<!entity gmime-data-wrapper SYSTEM "sgml/gmime-data-wrapper.sgml">
<!entity gmime-part SYSTEM "sgml/gmime-part.sgml">
<!entity gmime-message SYSTEM "sgml/gmime-message.sgml">
<!entity gmime-utils SYSTEM "sgml/gmime-utils.sgml">
<!entity internet-address SYSTEM "sgml/internet-address.sgml">
<!entity gmime-parser SYSTEM "sgml/gmime-parser.sgml">
<!entity gmime-charset SYSTEM "sgml/gmime-charset.sgml">
<!entity gmime-stream SYSTEM "sgml/gmime-stream.sgml">
<!entity gmime-stream-buffer SYSTEM "sgml/gmime-stream-buffer.sgml">
<!entity gmime-stream-file SYSTEM "sgml/gmime-stream-file.sgml">
<!entity gmime-stream-fs SYSTEM "sgml/gmime-stream-fs.sgml">
<!entity gmime-stream-mem SYSTEM "sgml/gmime-stream-mem.sgml">
<!entity gmime-stream-filter SYSTEM "sgml/gmime-stream-filter.sgml">
<!entity gmime-filter SYSTEM "sgml/gmime-filter.sgml">
<!entity gmime-filter-basic SYSTEM "sgml/gmime-filter-basic.sgml">
<!entity gmime-filter-crlf SYSTEM "sgml/gmime-filter-crlf.sgml">
]>

<book>
  <bookinfo>
    <title>GMime Library Reference Manual</title>
    <authorgroup>
      <author>
      <firstname>Jeffrey</firstname>
        <surname>Stedfast</surname>
        <affiliation>
          <address>
            <email>fejj@helixcode.com</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>2000, 2001</year>
      <holder>Jeffrey Stedfast</holder>
    </copyright>
  </bookinfo>

  <chapter id="gmime-notes">
    <title>GMime Programming Notes</title>

    <para>GMime is a powerful MIME (Multipurpose Internet Mail
    Extension) utility library. It is meant for creating, editing, and
    parsing MIME messages and structures.</para>
  </chapter>

  <chapter id="streams">
    <title>Streams</title>

    <para>Streams are the fundamental method for reading and writing
    data used by GMime.</para>

    <para>The three (3) basic stream types are: GMimeStreamFile,
    GMimeStreamFs and GMimeStreamMem. You can manipulate all three
    streams using the GMimeStream interfaces. In addition, some of
    these streams have extended interfaces to allow more fined grained
    manipulation.</para>

    <para>GMimeStreamFile and GMimeStreamFs are very similar in that
    they are both meant for reading and writing data to the file
    system (in the form of files). Since GMimeStreamFile is an
    abstracted layer above the libc FILE type, one of the added
    benefits is buffered I/O. GMimeStreamFs, on the other hand, is an
    abstracted layer above UNIX file descriptors. While a
    GMimeStreamFs <italic>can</italic> be used on top of a UNIX
    socket, you must be careful because sockets are not seekable. It
    is suggested that you use a GMimeStreamBuffer in cache mode if you
    intend to be able to seek, we will get to this advanced stream
    type later.</para>

    <para>Unlike the previous 2 stream types, GMimeStreamMem does not
    interact with the file system at all (except maybe the swap
    partition/file indirectly). Memory streams are handy when you want
    reads and writes to be nearly instantaneous and/or if you don't
    want to create a temporary file on disk.</para>

    <para>The two (2) advanced stream types are GMimeStreamBuffer (as
    was mentioned previously) and GMimeStreamFilter.</para>

    <para>The GMimeStreamBuffer type inherits from any other type of
    stream and has 3 modes: block reads, block writes, and cached
    reads. Block reads are especially useful if you will be making a
    lot of small reads from a stream that accesses the file
    system. Block writes are useful for very much the same reason. The
    final mode, cached reads, can become memory intensive but can be
    very helpful when inheriting form a stream that does not support
    seeking.</para>

    <para>Our final stream type, GMimeStreamFilter, also inherits from
    another stream. This stream, as you may have guessed, filters
    reads and writes to its inherited stream. For example, one could
    write a compression filter and apply it to a GMimeStreamFilter and
    any further reads or writes would be compressed.</para>
  </chapter>

  <chapter id="data-wrappers">
    <title>Data Wrappers</title>

    <para>Data wrappers are a very simple concept. They wrap
    data. Actually, they wrap around a source stream and contain
    information about the format of the source stream. This makes
    writing a data wrapper to another stream incredibly easy because
    it will unformat the data into it's raw form before writing it to
    the output stream.</para>
  </chapter>

  <chapter id="libgmime">
    <title>GMime Library Reference</title>

    <para>This section contains the complete API reference for
    libgmime. All the public interfaces are documented here. This
    reference guide is built by extracting Gtk-Doc comments from the
    source code.</para>

    <para>All public functions that return const pointers are not to
    be free'd, they point to data internal to the structure. Functions
    that don't return const pointers MUST be free'd by the caller -
    the ONLY exception to this are functions that return GList
    structures.</para>

    &gmime-stream;
    &gmime-stream-buffer;
    &gmime-stream-file;
    &gmime-stream-fs;
    &gmime-stream-mem;
    &gmime-stream-filter;
    &gmime-filter;
    &gmime-filter-basic;
    &gmime-filter-crlf;
    &gmime-param;
    &gmime-header;
    &gmime-content-type;
    &gmime-data-wrapper;
    &gmime-part;
    &gmime-message;
    &gmime-utils;
    &internet-address;
    &gmime-parser;
    &gmime-charset;
  </chapter>
</book>
