It is my intention to make migrating code using one version of GMime
to another as easy as I can and so for the most part, I will try not
to break API/ABI compatability between versions, however this isn't
always easy to do.

This document is intended to help developers port their application(s)
from one version of GMime to another. For each new major release, I
will attempt to list the main things to watch out for when migrating
to the new release from the prior version.


Porting from GMime 2.2 to GMime 2.4
-----------------------------------

GMime 2.4 is much the same as GMime 2.2 except that ALL public APIs
that used to use off_t in GMime 2.2 now use gint64 so that the API and
ABI do not change based on whether or not large file support is
supported.

In addition, some of the deprecated functions were removed if they had
equivalent functionality in a parent class. The list of removed
functions are as follows:

- g_mime_stream_ref()
- g_mime_stream_unref()

- g_mime_object_ref()
- g_mime_object_unref()

- g_mime_part_to_string()
- g_mime_part_write_to_stream()

- g_mime_message_to_string()
- g_mime_message_write_to_stream()

If you were using any of the ref() or unref() functions listed above,
you can replace them with calls to g_object_ref() or g_object_unref()
instead.

Calls to g_mime_part_to_string() or g_mime_message_to_string() should
be replaced with calls to g_mime_object_to_string() instead.

Similarly, calls to g_mime_part_write_to_stream() or
g_mime_message_write_to_stream() should be replaced with calls to
g_mime_object_write_to_stream() instead.

For the sake of consistency, functions such as g_mime_cipher_sign()
were renamed to g_mime_cipher_context_sign() in order to match their
class name. The old names have been deprecated but the symbols are
still there to ease migration. Below is a mapping of the function name
changes:

GMime 2.2 Name            | GMime 2.4 Name
-------------------------------------------------------------
g_mime_cipher_hash_id       g_mime_cipher_context_hash_id
g_mime_cipher_hash_name     g_mime_cipher_context_hash_name
g_mime_cipher_sign          g_mime_cipher_context_sign
g_mime_cipher_verify        g_mime_cipher_context_verify
g_mime_cipher_encrypt       g_mime_cipher_context_encrypt
g_mime_cipher_decrypt       g_mime_cipher_context_decrypt
g_mime_cipher_import_keys   g_mime_cipher_context_import_keys
g_mime_cipher_export_keys   g_mime_cipher_context_export_keys


Porting from GMime 2.0 to GMime 2.2
-----------------------------------

Note: GMime 2.2 is both API and ABI compatible with GMime 2.0 meaning
that any program written for GMime 2.0 will compile fine with GMime
2.2 and any program linked against GMime 2.0's libraries will also
work with GMime 2.2's libraries.

Most of the changes made between 2.0 and 2.2 were internal but there
are a few API changes you should be aware of (as these interfaces will
be deprecated in some future version, probably 3.0).

- g_mime_utils_8bit_header_decode() has been split into 2
functions. We now have g_mime_utils_header_decode_text() and
g_mime_utils_header_decode_phrase(). header_decode_text() no longer
requires encoded-words to be rfc822 atoms. header_decode_phrase() is
still strict in that encoded-words MUST be valid rfc822 atoms.

- g_mime_utils_8bit_header_encode() has been renamed to
g_mime_utils_header_encode_text() to be more clear as to what type of
header this is supposed to encode. If you haven't guessed, this
function is for encoding rfc822 'text' headers (such as Subject).

- g_mime_utils_8bit_header_encode_phrase() has been renamed to
g_mime_utils_header_encode_phrase() mostly for consistancy with the
previous 2 changes.

- g_mime_charset_name() has been renamed to
g_mime_charset_iconv_name() for clarity.

- g_mime_charset_locale_name() has been renamed to
g_mime_locale_charset(). Hmmm, was this a bad rename?

- g_mime_cipher_context_verify() no longer returns a
GMimeCipherValidity, instead it returns a GMimeSignatureValidity which
is far more useful. Never fear, you may still use the
GMimeCipherValidity APIs for the time being - they work fine given a
GMimeSignatureValidity structure.

- g_mime_multipart_signed_verify() also now returns a
GMimeSignatureValidity structure rather than a GMimeCipherValidity
structure. See changes to g_mime_cipher_context_verify() for details.


Porting from GMime 1.0 to GMime 2.0
-----------------------------------

The major change here is that I've dropped my own base object class
and have replaced it with GObject from glib-2.0. This should be a
pleasant change since you (the developer) will now be able to do many
more things such as setting arbitrary data on all GMime objects. For
additional information about GObject, please see the GObject Reference
Manual at http://developer.gnome.org/doc/API/2.0/gobject/

- The first thing you need to know is that any function returning a
non-const pointer to any object /must/ be unref'd when you are done
with it. Since all objects in GMime now subclass GObject, you may
safely use g_object_unref() (GMimeStream's may also be unref'd
using g_mime_stream_unref(), but either way is fine).

Don't forget that g_mime_part_get_content_object() returns a
ref-counted GMimeDataWrapper object now, and so you /must/ unref it
when you have finished using it. You must also remember to unref any
GMimeDataWrapper object that you /set/ on a GMimePart using
g_mime_part_set_content_object() as the GMimePart will now ref the
content object that you set on it.

- GMimeMultipart is a new class which is to be used for all multipart
MIME parts rather than GMimePart (as in 1.0). There are also some
subclasses of GMimeMultipart for other things.

- g_mime_part_[g,s]et_boundary() have been removed (see above). You
must now create a GMimeMultipart object and use
g_mime_multipart_[g,s]et_boundary().

- g_mime_part_add_subpart() has been replaced with
g_mime_multipart_add_part().

- g_mime_part_foreach() has been replaced with
g_mime_multipart_foreach() and/or g_mime_message_foreach_part().

- g_mime_part_get_subpart_from_content_id() has been replaced with
g_mime_multipart_get_subpart_from_content_id().

- Another new class is GMimeMessagePart which is to be used for all
MIME parts containing an rfc822 message. All 1.0 GMimePart's
representing message/rfc822 parts (as well as message/news parts?)
need to be migrated over to be GMimeMessagePart objects.

- GMimeMessagePartial is another class meant for handling the
message/partial MIME type. All 1.0 GMimePart's holding data of this
type should be replaced with GMimeMessagePartial objects.

- g_mime_message_write_to_stream() and g_mime_part_write_to_stream()
functions have been consolidated into a virtual method. Replace calls
to these functions with g_mime_object_write_to_stream(). Note: while
g_mime_part_write_to_stream() and g_mime_message_write_to_stream()
still exist, it is suggested you migrate to
g_mime_object_write_to_stream(). Same goes for g_mime_part_to_string()
and g_mime_message_to_string().

- GMimeMessage's structure has changed a bit. You will not be able to
do message->header, instead you want to do ((GMimeObject *)
message)->header.

- g_mime_message_set_message_id() now takes a message_id argument
without the encapsulating <>'s (it now just takes the addr-spec
portion of the msg-id).

- GMimeFilterFrom has changed slightly, you will want to replace all
calls to g_mime_filter_from_new () with g_mime_filter_from_new
(GMIME_FILTER_FROM_MODE_DEFAULT) (GMIME_FILTER_FROM_MODE_DEFAULT is
equivalent to (int) 0).

- GMimeParser has had a number of API additions, but
g_mime_parser_construct_part() and g_mime_parser_construct_message()
still exist, however they no longer take a GMimeStream
argument. Instead, they take a GMimeParser object.



If you find more trouble spots when porting your code from one version
of GMime to a later version, please feel free to send me additional
notes to add to this porting document.

					-- fejj@gnome.org
