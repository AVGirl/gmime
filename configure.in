dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure.in)
AM_CONFIG_HEADER(config.h)

# In the following, there are a the following variants
# of GLib cflags and libs variables
#
# GLIB_CFLAGS:  cflags for compiling libraries and example progs
# GLIB_LIBS:    libraries for linking example programs
# glib_cflags:  cflags to store in gmime-config
# glib_libs:    libs to store in gmime-config

GMIME_MAJOR_VERSION=2
GMIME_MINOR_VERSION=1
GMIME_MICRO_VERSION=6
GMIME_VERSION=$GMIME_MAJOR_VERSION.$GMIME_MINOR_VERSION.$GMIME_MICRO_VERSION
GMIME_VERSION_INFO=`expr $GMIME_MAJOR_VERSION + $GMIME_MINOR_VERSION`:$GMIME_MICRO_VERSION:$GMIME_MINOR_VERSION

AC_SUBST(GMIME_MAJOR_VERSION)
AC_SUBST(GMIME_MINOR_VERSION)
AC_SUBST(GMIME_MICRO_VERSION)
AC_SUBST(GMIME_VERSION)
AC_SUBST(GMIME_VERSION_INFO)

VERSION=$GMIME_VERSION

AM_INIT_AUTOMAKE(gmime, $VERSION)

AC_CANONICAL_HOST

dnl Checks for programs.
AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_C_INLINE
dnl AC_HEADER_STDC
AC_STDC_HEADERS
AC_ARG_PROGRAM
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PATH_PROG(RM, rm, /bin/rm)
AC_PATH_PROG(MV, mv, /bin/mv)
AC_PATH_PROG(TAR, tar, /bin/tar)

AM_PROG_LIBTOOL

AM_MAINTAINER_MODE

LDFLAGS=${_ldflags}

dnl Checks for header files.
AC_CHECK_HEADERS(sys/mman.h)
AC_CHECK_HEADERS(sys/param.h)
AC_CHECK_HEADERS(string.h)
AC_CHECK_HEADERS(stdlib.h)
AC_CHECK_HEADERS(netdb.h)
AC_CHECK_HEADERS(ctype.h)
AC_CHECK_HEADERS(time.h)

AC_CHECK_TYPE(off_t, long)
AC_CHECK_TYPE(size_t, unsigned int)
AC_CHECK_TYPE(ssize_t, int)

dnl Check for the isblank GNUism
AC_CHECK_FUNCS(isblank)

dnl Check for strcase functions
AC_CHECK_FUNCS(strncasecmp strcasecmp)

dnl Check for some time functions
AC_CHECK_FUNCS(strftime localtime gmtime_r)

dnl Check for working mmap
AC_FUNC_MMAP
AC_CHECK_FUNCS(munmap msync)

dnl ******************************
dnl gtk-doc
dnl ******************************

GTK_DOC_CHECK([1.0])

dnl NOTE: We need to use a separate automake conditional for this
dnl       to make this work with the tarballs.
AM_CONDITIONAL(ENABLE_GTK_DOC, test "x$enable_gtk_doc" = "xyes")

dnl Check for gprof action
AC_ARG_ENABLE(gprof, [  --enable-gprof          Enable gprof profiling compile flags [default=no]], enable_gprof="$enableval", enable_gprof="no")
if test "x$enable_gprof" = "xyes"; then
  CFLAGS="$CFLAGS -pg"
fi

dnl Enable warning spewage on the console
AC_ARG_ENABLE(warnings, [  --enable-warnings       Enable g_warning spewage on the console when invalid MIME is encountered [default=no]], enable_warnings="$enableval", enable_warnings="no")
if test "x$enable_warnings" = "xyes"; then
  CFLAGS="$CFLAGS -Wall -Wcast-align -Wmissing-prototypes -Wreturn-type -Wuninitialized -Wunused -Werror"
fi

AM_CONDITIONAL(ENABLE_WARNINGS, test "x$enable_warnings" = "xyes")


dnl We need at *least* glib 2.0.0
AM_PATH_GLIB_2_0(2.0.0, ,
		 AC_MSG_ERROR(Cannot find GLIB: Is pkg-config in your path?),
		 gobject gmodule gthread)

glib_cflags="$GLIB_CFLAGS"
glib_libs="$GLIB_LIBS"
AC_SUBST(glib_cflags)
AC_SUBST(glib_libs)

dnl *****************************
dnl *** Checks for zlib       ***
dnl *****************************
AC_CHECK_HEADERS(zlib.h)
AC_CHECK_LIB(z, inflate, ZLIB="-lz")

dnl *****************************
dnl *** Checks for libnsl     ***
dnl *****************************
LIBNSL=""
AC_CHECK_LIB(nsl, gethostbyname, LIBNSL="-lnsl")

dnl Check for libiconv
AM_ICONV()

CFLAGS_save="$CFLAGS"
CFLAGS="$CFLAGS -I$srcdir"
LIBS_save="$LIBS"
LIBS="$LIBS $LIBICONV"

AC_MSG_CHECKING(preferred charset formats for system iconv)
AC_TRY_RUN([
#define CONFIGURE_IN
#include "iconv-detect.c"
],[
	AC_MSG_RESULT(found)
	AC_DEFINE(HAVE_ICONV_DETECT_H)
],[
	AC_MSG_RESULT(not found)
	AC_ERROR([
	*** The iconv-detect program was unable to determine the
	*** preferred charset formats recognized by your system
	*** iconv library. It is suggested that you install a
	*** working iconv library such as the one found at
	*** ftp://ftp.gnu.org/pub/gnu/libiconv
	])
])

CFLAGS="$CFLAGS_save"
LIBS="$LIBS_save"

dnl Timezone checks
AC_CACHE_CHECK(for tm_gmtoff in struct tm, ac_cv_struct_tm_gmtoff,
	AC_TRY_COMPILE([
		#include <time.h>
		], [
		struct tm tm;
		tm.tm_gmtoff = 1;
		], ac_cv_struct_tm_gmtoff="yes", ac_cv_struct_tm_gmtoff="no"))
if test "$ac_cv_struct_tm_gmtoff" = "yes"; then
	AC_DEFINE(HAVE_TM_GMTOFF, 1, [Define if struct tm has a tm_gmtoff member])
else
	AC_CACHE_CHECK(for timezone variable, ac_cv_var_timezone,
		AC_TRY_COMPILE([
			#include <time.h>
		], [
			timezone = 1;
		], ac_cv_var_timezone="yes", ac_cv_var_timezone="no"))
	if test "$ac_cv_var_timezone" = "yes"; then
		AC_DEFINE(HAVE_TIMEZONE, 1, [Define if libc defines a timezone variable])
		AC_CACHE_CHECK(for altzone variable, ac_cv_var_altzone,
			AC_TRY_COMPILE([
				#include <time.h>
			], [
				altzone = 1;
			], ac_cv_var_altzone="yes", ac_cv_var_altzone="no"))
		if test "$ac_cv_var_altzone" = "yes"; then
			AC_DEFINE(HAVE_ALTZONE, 1, [Define if libc defines an altzone variable])
		fi
	else
		AC_ERROR(unable to find a way to determine timezone)
	fi
fi

dnl Check for some network functions
AC_CHECK_FUNCS(gethostname gethostbyname)

dnl **************************************************
dnl gethostbyname_r prototype
dnl **************************************************

AC_CHECK_FUNCS(gethostbyname_r,[
AC_CACHE_CHECK([if gethostbyname_r wants five arguments], ac_cv_gethostbyname_r_five_args,
[
	AC_TRY_COMPILE([
		#include "confdefs.h"
		#include <sys/types.h>
		#include <sys/socket.h>
		#include <netinet/in.h>
		#include <netdb.h>

		#define BUFSIZE (sizeof(struct hostent)+10)
	],[
		struct hostent hent;
		char buffer[BUFSIZE];
		int bufsize=BUFSIZE;
		int h_errno;

		(void)gethostbyname_r ("www.ximian.com", &hent, buffer, bufsize, &h_errno);
	],[
		ac_cv_gethostbyname_r_five_args="yes"
	],[
		ac_cv_gethostbyname_r_five_args="no"
	])
])])
	
if test "x$ac_cv_gethostbyname_r_five_args" = "xyes" ; then
	AC_DEFINE(GETHOSTBYNAME_R_FIVE_ARGS, 1, [Solaris-style gethostbyname_r])
fi

dnl **************************************************
dnl gethostbyaddr_r prototype
dnl **************************************************

AC_CHECK_FUNCS(gethostbyaddr_r,[
AC_CACHE_CHECK([if gethostbyaddr_r wants seven arguments], ac_cv_gethostbyaddr_r_seven_args,
[
	AC_TRY_COMPILE([
		#include "confdefs.h"
		#include <sys/types.h>
		#include <sys/socket.h>
		#include <netinet/in.h>
		#include <netdb.h>

		#define BUFSIZE (sizeof(struct hostent)+10)
	],[
		struct hostent hent;
		char buffer[BUFSIZE];
		int bufsize=BUFSIZE;
		int h_errno;

		(void)gethostbyaddr_r ("www.ximian.com", 14, AF_INET, &hent, buffer, bufsize, &h_errno);
	],[
		ac_cv_gethostbyaddr_r_seven_args="yes"
	],[
		ac_cv_gethostbyaddr_r_seven_args="no"
	])
])])
	
if test "x$ac_cv_gethostbyaddr_r_seven_args" = "xyes" ; then
	AC_DEFINE(GETHOSTBYADDR_R_SEVEN_ARGS, 1, [Solaris-style gethostbyaddr_r])
fi


dnl **************************************************
dnl * IPv6 support
dnl **************************************************
AC_ARG_ENABLE(ipv6, [  --enable-ipv6=[yes/no]      Enable support for resolving IPv6 addresses.],,enable_ipv6="auto")
if test "x$enable_ipv6" != "xno"; then
AC_CACHE_CHECK([if system has necessary structs and functions for IPv6 support], msg_ipv6,
[
	AC_TRY_COMPILE([
		#include "confdefs.h"
		#include <sys/types.h>
		#include <sys/socket.h>
		#include <netinet/in.h>
		#include <netdb.h>

	],[
		struct addrinfo hints, *res;
		struct sockaddr_in6 sin6;
		int af = AF_INET6;
		
		getaddrinfo ("www.ximian.com", NULL, &hints, &res);
		freeaddrinfo (res);
	],[
		enable_ipv6="yes"
		msg_ipv6="yes"
	],[
		enable_ipv6="no"
		msg_ipv6="no"
	])
])
else
	enable_ipv6="no"
fi

if test "x$enable_ipv6" = "xyes"; then
	AC_DEFINE(ENABLE_IPv6,1,[Enable IPv6 support])
fi
AM_CONDITIONAL(ENABLE_IPv6, test "x$enable_ipv6" = "xyes")


dnl Extra libs
EXTRA_LIBS="$ZLIB"
if test "x$LIBNSL" != "x"; then
	EXTRA_LIBS="$EXTRA_LIBS $LIBNSL"
fi
if test "x$LIBICONV" != "x"; then
	EXTRA_LIBS="$EXTRA_LIBS $LIBICONV"
fi

AC_SUBST(CFLAGS)

LIBS="$LIBS $EXTRA_LIBS"
AC_SUBST(LIBS)

GMIME_LIBDIR="-L${libdir}"
GMIME_INCLUDEDIR="-I${includedir}/gmime-2.0"
GMIME_LIBS="-lgmime-2.0 $EXTRA_LIBS"
GMIME_CFLAGS=""

AC_SUBST(GMIME_LIBS)
AC_SUBST(GMIME_LIBDIR)
AC_SUBST(GMIME_INCLUDEDIR)
AC_SUBST(GMIME_CFLAGS)
AC_SUBST(HTML_DIR)

AC_OUTPUT(
Makefile
docs/Makefile
docs/reference/Makefile
docs/tutorial/Makefile
examples/Makefile
util/Makefile
gmime/Makefile
gmime/gmime.h
src/Makefile
tests/Makefile
gmime-config
gmime-2.0.pc
gmime.spec
)

echo "

Configuration:

  Source code location: ${srcdir}
  Install prefix:       ${prefix}
  Compiler:             ${CC}

  Profiling enabled:    ${enable_gprof}
  IPv6 support enabled: ${enable_ipv6}
  Warnings enabled:     ${enable_warnings}
"
