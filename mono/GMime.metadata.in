<?xml version="1.0"?>
<metadata>
  <!-- Rename some items -->
  <attr path="/api/namespace/enum/member[@cname='GMIME_BEST_ENCODING_7BIT']" name="name">SevenBit</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_BEST_ENCODING_8BIT']" name="name">EightBit</attr>

  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_DEFAULT']" name="name">Default</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_7BIT']" name="name">SevenBit</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_8BIT']" name="name">EightBit</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_BINARY']" name="name">Binary</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_BASE64']" name="name">Base64</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_QUOTEDPRINTABLE']" name="name">QuotedPrintable</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_ENCODING_UUENCODE']" name="name">Uuencode</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_PART_NUM_ENCODINGS']" name="hidden">1</attr>

  <attr path="/api/namespace/enum/member[@cname='GMIME_FILTER_BASIC_BASE64_ENC']" name="name">Base64Encode</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_FILTER_BASIC_BASE64_DEC']" name="name">Base64Decode</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_FILTER_BASIC_QP_ENC']" name="name">QpEncode</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_FILTER_BASIC_QP_DEC']" name="name">QpDecode</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_FILTER_BASIC_UU_ENC']" name="name">Uuencode</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_FILTER_BASIC_UU_DEC']" name="name">Uudecode</attr>

  <attr path="/api/namespace/enum/member[@cname='GMIME_STREAM_SEEK_SET']" name="value">0</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_STREAM_SEEK_CUR']" name="value">1</attr>
  <attr path="/api/namespace/enum/member[@cname='GMIME_STREAM_SEEK_END']" name="value">2</attr>

  <attr path="/api/namespace/class[@name='Utils']/method[@name='8BitHeaderDecode']" name="name">EightBitHeaderDecode</attr>
  <attr path="/api/namespace/class[@name='Utils']/method[@name='8BitHeaderEncode']" name="name">EightBitHeaderEncode</attr>
  <attr path="/api/namespace/class[@name='Utils']/method[@name='8BitHeaderEncodePhrase']" name="name">EightBitHeaderEncodePhrase</attr>

  <attr path="/api/namespace/object[@cname='GMimeDisposition']/method[@name='Get']" name="name">GetDisposition</attr>
  <attr path="/api/namespace/object[@cname='GMimeDisposition']/method[@name='Set']" name="name">SetDisposition</attr>

  <attr path="/api/namespace/object[@cname='GMimeDataWrapper']/method[@name='GetStream']" name="name">GetGMimeStream</attr>
  <attr path="/api/namespace/object[@cname='GMimeDataWrapper']/method[@name='SetStream']" name="name">SetGMimeStream</attr>

  <attr path="/api/namespace/object[@cname='GMimeFilter']/method[@cname='g_mime_filter_filter']" name="name">ApplyFilter</attr>
  <attr path="/api/namespace/object[@cname='GMimeFilter']/method[@cname='g_mime_filter_filter']/*/*[@name='outlen']" name="name">foo</attr>
  <attr path="/api/namespace/object[@cname='GMimeFilter']/method[@cname='g_mime_filter_filter']/*/*[@type='char**']" name="pass_as">out</attr>
  <attr path="/api/namespace/object[@cname='GMimeFilter']/method[@cname='g_mime_filter_complete']/*/*[@name='outlen']" name="name">foo</attr>
  <attr path="/api/namespace/object[@cname='GMimeFilter']/method[@cname='g_mime_filter_complete']/*/*[@type='char**']" name="pass_as">out</attr>
  <attr path="/api/namespace/object[@cname='GMimeMultipart']/method[@name='Foreach']" name="name">ForeachPart</attr>
  <attr path="/api/namespace/object[@cname='GMimeStream']/method[@name='Length']" name="name">GetLength</attr>

  <!-- We need to remap off_t conditionally.  For 64-bit systems or 32-bit
       systems without large file support, "long" is the right thing here, and
       the generator will map it to an IntPtr for marshaling.  However, if
       large file support is enabled on 32-bit systems, off_t must be mapped to
       "gint64" and marshaled as a C# "long".  See Makefile.am for the actual
       replacement. -->

  <attr path="/api/namespace/*/field[@type='off_t']" name="type">@off_t_type@</attr>
  <attr path="/api/namespace/*/*/return-type[@type='off_t']" name="type">@off_t_type@</attr>
  <attr path="/api/namespace/*/*/parameter[@type='off_t']" name="type">@off_t_type@</attr>
  <attr path="/api/namespace/*/*/*/parameter[@type='off_t']" name="type">@off_t_type@</attr>

  <!-- We want to be able to get at the type and subtype fields of this
       structure, so don't mark it as opaque. -->
  <attr path="/api/namespace/struct[@cname='GMimeContentType']" name="opaque">false</attr>

  <!-- The generator irritating always converts a method named GetType to a
       GType property regardless of whether or not it's actually a glib type
       So rename this one -->
  <attr path="/api/namespace/struct[@cname='InternetAddress']/method[@cname='internet_address_get_type']" name="name">GetAddressType</attr>

  <!-- Certain things take const unsigned char *, which the generator doesn't deal with nicely. -->
  <attr path="/api/namespace/class[@name='Utils']/*/*/parameter[@type='const-unsigned']" name="name">str</attr>
  <attr path="/api/namespace/class[@name='Utils']/*/*/parameter[@type='const-unsigned']" name="type">const-char*</attr>
  <attr path="/api/namespace/class[@name='Utils']/*/*/parameter[@type='const-unsigned-char*']" name="name">str</attr>
  <attr path="/api/namespace/class[@name='Utils']/*/*/parameter[@type='const-unsigned-char*']" name="type">const-char*</attr>

  <!-- Hide some problematic and nonsensical elements -->
  <attr path="/api/namespace/struct[@cname='GMimeHeader']/method[@name='SetRaw']" name="hidden">1</attr>
  <attr path="/api/namespace/object[@cname='GMimeMessage']/method[@name='GetDate']/*/*[@name='date']" name="hidden">1</attr>
  <attr path="/api/namespace/object[@cname='GMimeMessage']/method[@name='WriteToStream']" name="hidden">1</attr>
  <attr path="/api/namespace/object[@cname='GMimeStream']/method[@name='Read']" name="hidden">1</attr>
  <attr path="/api/namespace/object[@cname='GMimeStreamMem']/constructor[@cname='g_mime_stream_mem_new_with_byte_array']" name="hidden">1</attr>
  <attr path="/api/namespace/object[@cname='GMimeStreamFile']" name="hidden">1</attr>

  <!-- We implement this class by hand, hide it. -->
  <attr path="/api/namespace/struct[@cname='InternetAddressList']" name="hidden">1</attr>

  <!-- Some functions return new objects with owned refs -->
  <attr path="/api/namespace/object[@cname='GMimeDataWrapper']/method[@name='GetGMimeStream']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimeMessagePart']/method[@name='GetMessage']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimeMessage']/method[@name='GetMimePart']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimeMultipart']/method[@name='GetPart']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimeMultipart']/method[@name='GetSubpartFromContentId']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimeParser']/method[@name='ConstructPart']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimeParser']/method[@name='ConstructMessage']/return-type" name="owned">true</attr>
  <attr path="/api/namespace/object[@cname='GMimePart']/method[@name='GetContentObject']/return-type" name="owned">true</attr>
</metadata>
